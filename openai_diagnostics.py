#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å OpenAI API
–ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –æ—Ç–¥–µ–ª—å–Ω–æ: python openai_diagnostics.py
"""

import os
import sys
import requests
from openai import OpenAI
import json
from datetime import datetime

def print_header(title):
    print(f"\n{'='*50}")
    print(f"üîç {title}")
    print(f"{'='*50}")

def check_environment():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print_header("–ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø")
    
    api_key = os.getenv("OPENAI_API_KEY")
    if api_key:
        print(f"‚úÖ OPENAI_API_KEY –Ω–∞–π–¥–µ–Ω")
        print(f"üìù –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å: {api_key[:10]}...")
        print(f"üìè –î–ª–∏–Ω–∞ –∫–ª—é—á–∞: {len(api_key)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞
        if api_key.startswith("sk-"):
            print("‚úÖ –§–æ—Ä–º–∞—Ç –∫–ª—é—á–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å sk-)")
        else:
            print("‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞ (–¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å sk-)")
    else:
        print("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        print("   export OPENAI_API_KEY='your-api-key-here'")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    model = os.getenv("OPENAI_MODEL", "gpt-4o")
    print(f"üìã –ú–æ–¥–µ–ª—å: {model}")
    
    return True

def check_internet_connection():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"""
    print_header("–ü–†–û–í–ï–†–ö–ê –ò–ù–¢–ï–†–ù–ï–¢ –°–û–ï–î–ò–ù–ï–ù–ò–Ø")
    
    test_urls = [
        "https://www.google.com",
        "https://api.openai.com",
        "https://openai.com"
    ]
    
    for url in test_urls:
        try:
            response = requests.get(url, timeout=10)
            if response.status_code == 200:
                print(f"‚úÖ {url} - –¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                print(f"‚ö†Ô∏è {url} - –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        except requests.exceptions.Timeout:
            print(f"‚ùå {url} - —Ç–∞–π–º–∞—É—Ç")
        except requests.exceptions.ConnectionError:
            print(f"‚ùå {url} - –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        except Exception as e:
            print(f"‚ùå {url} - –æ—à–∏–±–∫–∞: {e}")

def check_openai_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤ OpenAI"""
    print_header("–ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê OPENAI")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å—Ç–∞—Ç—É—Å–∞ OpenAI
        response = requests.get("https://status.openai.com/api/v2/status.json", timeout=10)
        if response.status_code == 200:
            data = response.json()
            status = data.get('status', {}).get('description', 'Unknown')
            print(f"üåê –°—Ç–∞—Ç—É—Å OpenAI: {status}")
        else:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å OpenAI")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {e}")

def test_openai_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º API OpenAI"""
    print_header("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï OPENAI API")
    
    try:
        client = OpenAI()  # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
        print("üîç –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π...")
        try:
            models = client.models.list()
            available_models = [model.id for model in models.data]
            print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(available_models)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω—ã–µ –º–æ–¥–µ–ª–∏
            needed_models = ["gpt-4o", "gpt-4", "gpt-3.5-turbo", "whisper-1"]
            for model in needed_models:
                if model in available_models:
                    print(f"‚úÖ –ú–æ–¥–µ–ª—å {model} –¥–æ—Å—Ç—É–ø–Ω–∞")
                else:
                    print(f"‚ùå –ú–æ–¥–µ–ª—å {model} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π: {e}")
            return False
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ —á–∞—Ç-–º–æ–¥–µ–ª–∏
        print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º chat completions...")
        try:
            response = client.chat.completions.create(
                model="gpt-3.5-turbo",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –¥–µ—à–µ–≤—É—é –º–æ–¥–µ–ª—å –¥–ª—è —Ç–µ—Å—Ç–∞
                messages=[{"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç."}],
                max_tokens=10,
                temperature=0
            )
            print(f"‚úÖ Chat API —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            print(f"üìù –û—Ç–≤–µ—Ç: {response.choices[0].message.content}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ Chat API: {e}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
            error_str = str(e).lower()
            if "authentication" in error_str:
                print("üîë –ü—Ä–æ–±–ª–µ–º–∞ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á")
            elif "quota" in error_str or "billing" in error_str:
                print("üí≥ –ü—Ä–æ–±–ª–µ–º–∞ —Å –∫–≤–æ—Ç–æ–π –∏–ª–∏ –±–∏–ª–ª–∏–Ω–≥–æ–º")
            elif "rate" in error_str:
                print("üö¶ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤")
            elif "connection" in error_str or "timeout" in error_str:
                print("üåê –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç–µ–≤—ã–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º")
            return False
            
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ OpenAI: {e}")
        return False
    
    return True

def check_account_info():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ"""
    print_header("–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û–ë –ê–ö–ö–ê–£–ù–¢–ï")
    
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        print("‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    try:
        # –î–µ–ª–∞–µ–º –ø—Ä—è–º–æ–π HTTP –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∏–ª–ª–∏–Ω–≥–∞
        headers = {
            "Authorization": f"Bearer {api_key}",
            "Content-Type": "application/json"
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∏–ª–ª–∏–Ω–≥ (–º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∫–ª—é—á–µ–π)
        try:
            response = requests.get(
                "https://api.openai.com/v1/usage?date=2024-01-01", 
                headers=headers, 
                timeout=10
            )
            if response.status_code == 200:
                print("‚úÖ API –∫–ª—é—á –≤–∞–ª–∏–¥–µ–Ω –∏ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –±–∏–ª–ª–∏–Ω–≥–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
            elif response.status_code == 401:
                print("‚ùå API –∫–ª—é—á –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω")
            elif response.status_code == 403:
                print("‚ö†Ô∏è API –∫–ª—é—á –≤–∞–ª–∏–¥–µ–Ω, –Ω–æ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∏–ª–ª–∏–Ω–≥—É")
            else:
                print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {response.status_code}")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∏–ª–ª–∏–Ω–≥: {e}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")

def check_regional_access():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è"""
    print_header("–ü–†–û–í–ï–†–ö–ê –†–ï–ì–ò–û–ù–ê–õ–¨–ù–´–• –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤–æ–µ–º IP
        response = requests.get("https://ipapi.co/json/", timeout=10)
        if response.status_code == 200:
            data = response.json()
            country = data.get('country_name', 'Unknown')
            city = data.get('city', 'Unknown')
            print(f"üåç –í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {city}, {country}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω—ã
            restricted_countries = ['Russia', 'China', 'Iran', 'North Korea']
            if country in restricted_countries:
                print(f"‚ö†Ô∏è OpenAI –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –≤ {country}")
                print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å VPN")
            else:
                print(f"‚úÖ OpenAI –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –≤ {country}")
        else:
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏–æ–Ω–∞: {e}")

def main():
    print("ü§ñ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ OpenAI API")
    print(f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∞—Å–ø–µ–∫—Ç—ã
    steps = [
        check_environment,
        check_internet_connection,
        check_openai_status,
        check_regional_access,
        check_account_info,
        test_openai_api,
    ]
    
    for step in steps:
        try:
            result = step()
            if result is False:
                print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ {step.__name__}")
        except Exception as e:
            print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ {step.__name__}: {e}")
    
    print_header("–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
    print("1. ‚úÖ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ OPENAI_API_KEY –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    print("2. üí≥ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ OpenAI –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞/–∫—Ä–µ–¥–∏—Ç—ã")
    print("3. üåê –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
    print("4. üö¶ –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω—ã –ª–∏–º–∏—Ç—ã - –ø–æ–¥–æ–∂–¥–∏—Ç–µ –∏–ª–∏ —É–≤–µ–ª–∏—á—å—Ç–µ –∫–≤–æ—Ç—É")
    print("5. üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
    print("6. üåç –ü—Ä–∏ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ VPN")
    
    print(f"\nüèÅ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {datetime.now().strftime('%H:%M:%S')}")

if __name__ == "__main__":
    main()