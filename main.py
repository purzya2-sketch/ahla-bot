# –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–ê–Ø –í–ï–†–°–ò–Ø –° WEBHOOK (–µ—Å–ª–∏ polling –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)
import os
import threading
from http.server import BaseHTTPRequestHandler, HTTPServer
import json
import time
import sys
import signal

# --- WEBHOOK HANDLER ---
class WebhookHandler(BaseHTTPRequestHandler):
    def do_POST(self):
        if self.path == '/webhook':
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)
            
            self.send_response(200)
            self.send_header('Content-type', 'text/plain')
            self.end_headers()
            self.wfile.write(b'OK')
            
            try:
                update = json.loads(post_data.decode('utf-8'))
                threading.Thread(target=process_webhook_update, args=(update,), daemon=True).start()
            except Exception as e:
                print(f"Webhook error: {e}")
        else:
            self.send_response(404)
            self.end_headers()
    
    def do_GET(self):
        # Health check
        self.send_response(200)
        self.send_header('Content-type', 'text/plain')
        self.end_headers()
        self.wfile.write(b'Bot is running')

def run_webhook_server():
    port = int(os.environ.get("PORT", "10000"))
    server = HTTPServer(("0.0.0.0", port), WebhookHandler)
    print(f"Webhook server running on port {port}")
    server.serve_forever()

# --- –ò–ú–ü–û–†–¢–´ ---
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from deep_translator import GoogleTranslator, MyMemoryTranslator
import re
HEB_RE = re.compile(r'[\u0590-\u05FF]')
import openai
import requests
import datetime
import random
import firebase_admin
from firebase_admin import credentials, firestore
import schedule
import pytz

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
TOKEN = '8147753305:AAEbWrC9D1hWM2xtK5L87XIGkD9GZAYcvFU'
openai.api_key = os.getenv("OPENAI_API_KEY")

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –ë–ï–ó polling
bot = telebot.TeleBot(TOKEN)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏
user_translations = {}
user_data = {}

def translate_text(text):
    src = 'he' if HEB_RE.search(text) else 'auto'
    
    last_err = None
    for _ in range(2):
        try:
            return GoogleTranslator(source=src, target='ru').translate(text)
        except Exception as e:
            last_err = e
            time.sleep(0.4)

    try:
        return MyMemoryTranslator(source=src, target='ru').translate(text)
    except Exception as e2:
        print(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: Google: {last_err} | MyMemory: {e2}")
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞"

# --- Firebase ---
from dotenv import load_dotenv
load_dotenv()

def _find_firebase_key():
    candidates = [
        os.getenv("FIREBASE_CREDENTIALS_PATH"),
        os.path.join(os.path.dirname(__file__), "trivia-game-79e1b-firebase-adminsdk-fbsvc-20be34c499.json"),
        "/etc/secrets/firebase-key.json"
    ]
    
    for p in candidates:
        if p and os.path.exists(p):
            return p
    raise FileNotFoundError("–ù–µ –Ω–∞–π–¥–µ–Ω –∫–ª—é—á Firebase")

firebase_key_path = _find_firebase_key()
cred = credentials.Certificate(firebase_key_path)
firebase_admin.initialize_app(cred)
db = firestore.client()

# --- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ---
ALLOWED_USERS = set()
def load_allowed_users():
    try:
        users_ref = db.collection("allowed_users").stream()
        for doc in users_ref:
            ALLOWED_USERS.add(int(doc.id))
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(ALLOWED_USERS)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

load_allowed_users()

# --- –§–†–ê–ó–´ –î–ù–Ø ---
phrase_db = [
    {"he": "◊ú◊ê◊ò ◊ú◊ê◊ò", "ru": "–ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ / –ù–µ —Å–ø–µ—à–∏", "note": "–ü–æ–ø—É–ª—è—Ä–Ω–∞—è —Ñ—Ä–∞–∑–∞ ‚Äî –æ —Ç–µ—Ä–ø–µ–Ω–∏–∏, —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–∏."},
    {"he": "◊ô◊ê◊ú◊ú◊î", "ru": "–î–∞–≤–∞–π / –ù—É –∂–µ!", "note": "–ú–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–ª–µ–Ω–≥, –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é."},
    {"he": "◊ó◊ë◊ú ◊¢◊ú ◊î◊ñ◊û◊ü", "ru": "–ö—Ä—É—Ç–æ! / –û—Ç–ª–∏—á–Ω–æ!", "note": "–ë—É–∫–≤. '–ñ–∞–ª—å –≤—Ä–µ–º–µ–Ω–∏', –Ω–æ –≤ —Å–ª–µ–Ω–≥–µ ‚Äî '—Å—É–ø–µ—Ä'."},
    {"he": "◊†◊®◊ê◊î ◊ú◊ô", "ru": "–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è", "note": "–§—Ä–∞–∑–∞ –º–Ω–µ–Ω–∏—è, —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ."},
    {"he": "◊û◊î ◊§◊™◊ê◊ï◊ù!", "ru": "–° —á–µ–≥–æ –≤–¥—Ä—É–≥?!", "note": "–£–¥–∏–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –Ω–µ—Å–æ–≥–ª–∞—Å–∏–µ, –æ—á–µ–Ω—å —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω–æ."}
]

# --- WEBHOOK UPDATE PROCESSOR ---
def process_webhook_update(update):
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º update –≤ –æ–±—ä–µ–∫—Ç telebot
        if 'message' in update:
            message = telebot.types.Message.de_json(update['message'])
            if message.content_type == 'text':
                handle_text(message)
            elif message.content_type in ['voice', 'audio']:
                handle_voice(message)
        elif 'callback_query' in update:
            callback = telebot.types.CallbackQuery.de_json(update['callback_query'])
            handle_callback(callback)
    except Exception as e:
        print(f"Error processing update: {e}")

# --- –ö–ù–û–ü–ö–ò ---
def get_keyboard():
    markup = InlineKeyboardMarkup()
    markup.row(
        InlineKeyboardButton("üß† –û–±—ä—è—Å–Ω–∏—Ç—å", callback_data="explain"),
        InlineKeyboardButton("üîÅ –ù–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥", callback_data="new")
    )
    return markup

def check_access(user_id):
    return not ALLOWED_USERS or user_id in ALLOWED_USERS

# --- HANDLERS ---
def handle_text(message):
    if not check_access(message.from_user.id):
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏, –¥–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω üëÆ‚Äç‚ôÄÔ∏è")
        return
    
    try:
        orig = message.text.strip()
        user_translations[message.chat.id] = orig
        translated_text = translate_text(orig)

        bot.send_message(
            message.chat.id,
            f"üìò –ü–µ—Ä–µ–≤–æ–¥:\n*{translated_text}*",
            reply_markup=get_keyboard(),
            parse_mode='Markdown'
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: {e}")
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ ü´£")

def handle_voice(message):
    if not check_access(message.from_user.id):
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏, –¥–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω üëÆ‚Äç‚ôÄÔ∏è")
        return
    
    # Voice processing logic here (same as before)
    bot.send_message(message.chat.id, "üéµ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ webhook —Ä–µ–∂–∏–º–µ")

def handle_callback(call):
    bot.answer_callback_query(call.id)
    
    if call.data == "explain":
        text = user_translations.get(call.message.chat.id)
        if not text:
            bot.send_message(call.message.chat.id, "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è.")
            return

        try:
            client = openai.OpenAI()
            response = client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {"role": "system", "content": (
                        "–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω–æ–≥–æ –∏–≤—Ä–∏—Ç–∞. "
                        "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ñ—Ä–∞–∑—É –Ω–∞ –∏–≤—Ä–∏—Ç–µ: –≤—ã–¥–µ–ª–∏ –ø–µ—Ä–µ–≤–æ–¥, –∫–æ—Ä–µ–Ω—å, –±–∏–Ω—å—è–Ω, –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ñ–æ—Ä–º—É –∫–∞–∂–¥–æ–≥–æ –≥–ª–∞–≥–æ–ª–∞. "
                        "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–±—ä—è—Å–Ω–∏ —Å–ª–µ–Ω–≥, —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å. "
                        "–ü—Ä–∏–≤–µ–¥–∏ –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–æ–π —Ñ—Ä–∞–∑–µ, –µ—Å–ª–∏ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ."
                    )},
                    {"role": "user", "content": text}
                ],
                temperature=0.4
            )

            answer = response.choices[0].message.content.strip()
            bot.send_message(call.message.chat.id, f"üß† –û–±—ä—è—Å–Ω–µ–Ω–∏–µ:\n{answer}")

        except Exception as e:
            print(f"GPT error: {e}")
            bot.send_message(call.message.chat.id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ.")
    
    elif call.data == "new":
        text = user_translations.get(call.message.chat.id)
        if text:
            try:
                translated_text = translate_text(text)
                bot.send_message(
                    call.message.chat.id,
                    f"üìò –ù–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥:\n*{translated_text}*",
                    reply_markup=get_keyboard(),
                    parse_mode='Markdown'
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
                bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ ü´£")

# --- SETUP WEBHOOK ---
def setup_webhook():
    try:
        # Get the Render URL
        render_url = os.environ.get('RENDER_EXTERNAL_URL')
        if not render_url:
            print("‚ùå RENDER_EXTERNAL_URL –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        webhook_url = f"{render_url}/webhook"
        
        # Set webhook
        result = bot.set_webhook(webhook_url)
        if result:
            print(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
            return True
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook")
            return False
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")
        return False

# --- –†–ê–°–°–´–õ–ö–ê ---
tz = pytz.timezone('Asia/Jerusalem')

def send_daily_phrase():
    for user_id in ALLOWED_USERS:
        try:
            phrase = random.choice(phrase_db)
            msg = (
                f"‚òÄÔ∏è ◊ë◊ï◊ß◊® ◊ò◊ï◊ë!\n–ö–∞–∫ –¥–µ–ª–∞? –í–æ—Ç —Ç–µ–±–µ —Ñ—Ä–∞–∑–∞ –¥–Ω—è:\n\n"
                f"üó£ *{phrase['he']}*\n"
                f"üìò –ü–µ—Ä–µ–≤–æ–¥: _{phrase['ru']}_\n"
                f"üí¨ –ü–æ—è—Å–Ω–µ–Ω–∏–µ: {phrase['note']}"
            )
            bot.send_message(user_id, msg, parse_mode='Markdown')
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ—Ä–∞–∑—ã –¥–Ω—è: {e}")

def schedule_daily_phrase():
    while True:
        now = datetime.datetime.now(tz)
        if now.hour == 8 and now.minute == 0:
            send_daily_phrase()
            time.sleep(60)
        time.sleep(1)

# --- –ó–ê–ü–£–°–ö ---
if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å webhook...")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
    if setup_webhook():
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        threading.Thread(target=schedule_daily_phrase, daemon=True).start()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º webhook —Å–µ—Ä–≤–µ—Ä
        print("‚úÖ Webhook bot –∑–∞–ø—É—â–µ–Ω")
        run_webhook_server()
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å webhook")
        sys.exit(1)