# --- –ò–ú–ü–û–†–¢–´ (–µ–¥–∏–Ω—ã–π –∏ –±–µ–∑ –¥—É–±–ª–µ–π) ---
import os, sys, time, threading, signal, random
from http.server import BaseHTTPRequestHandler, HTTPServer

import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

import pytz
from datetime import datetime, timedelta

from openai import OpenAI
from openai import (
    APIConnectionError, RateLimitError, APIStatusError,
    AuthenticationError, BadRequestError,
)

# –¢–∞–π–º–∑–æ–Ω–∞ (–Ω—É–∂–Ω–∞ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è 08:00)
tz = pytz.timezone('Asia/Jerusalem')

# –ö–ª–∏–µ–Ω—Ç OpenAI (–ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–æ–≤)
client = OpenAI(api_key=(os.getenv("OPENAI_API_KEY") or "").strip(), timeout=20)

def ask_gpt(messages, model="gpt-4o", max_retries=3):
    """–ó–∞–ø—Ä–æ—Å –∫ OpenAI —Å —Ä–µ—Ç—Ä–∞—è–º–∏ –∏ —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –ø–∞—É–∑–æ–π."""
    delay = 1.0
    for attempt in range(1, max_retries + 1):
        try:
            resp = client.chat.completions.create(
                model=model,
                messages=messages,
                temperature=0.4,
                timeout=30,  # –¥–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç
            )
            return resp.choices[0].message.content.strip()
        except (APIConnectionError, RateLimitError, APIStatusError) as e:
            print(f"[ask_gpt] API error (–ø–æ–ø—ã—Ç–∫–∞ {attempt}/{max_retries}): {e}")
            if attempt == max_retries:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None –≤–º–µ—Å—Ç–æ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
                return None
        except (AuthenticationError, BadRequestError) as e:
            # —ç—Ç–æ —É–∂–µ –Ω–µ —Å–µ—Ç—å ‚Äî –∫–ª—é—á/–∑–∞–ø—Ä–æ—Å. –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–ª—å—à–µ
            print(f"[ask_gpt] Auth/BadRequest error: {e}")
            raise
        except Exception as e:
            print(f"[ask_gpt] Unexpected error (–ø–æ–ø—ã—Ç–∫–∞ {attempt}/{max_retries}): {e}")
            if attempt == max_retries:
                return None
        
        if attempt < max_retries:
            sleep_time = delay + random.uniform(0, 0.5)
            print(f"[ask_gpt] –ñ–¥—ë–º {sleep_time:.1f} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...")
            time.sleep(sleep_time)
            delay *= 2
    
    return None

class HealthHandler(BaseHTTPRequestHandler):
    def _ok_headers(self):
        self.send_response(200)
        self.send_header("Content-Type", "text/plain; charset=utf-8")
        self.end_headers()

    def do_GET(self):
        self._ok_headers()
        try:
            self.wfile.write(b"ok")
        except BrokenPipeError:
            pass

    def do_HEAD(self):
        self._ok_headers()

def run_health_server():
    port = int(os.environ.get("PORT", "10000"))
    server = HTTPServer(("0.0.0.0", port), HealthHandler)
    print(f"Health server on port {port}")
    server.serve_forever()

# –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
threading.Thread(target=run_health_server, daemon=True).start()


# ======= –ù–ê–°–¢–†–û–ô–ö–ò =======
TOKEN = '8147753305:AAEbWrC9D1hWM2xtK5L87XIGkD9GZAYcvFU'
openai.api_key = os.getenv("OPENAI_API_KEY")

# üîí –ó–ê–©–ò–¢–ê –û–¢ –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–• –≠–ö–ó–ï–ú–ü–õ–Ø–†–û–í
def clear_webhook_and_wait():
    """–û—á–∏—â–∞–µ—Ç webhook –∏ –∂–¥–µ—Ç, –ø–æ–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è"""
    try:
        import requests
        url = f"https://api.telegram.org/bot{TOKEN}/deleteWebhook"
        response = requests.post(url)
        print(f"Webhook cleared: {response.json()}")
        
        # –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤
        print("‚è≥ –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤...")
        time.sleep(20)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ webhook: {e}")

# –û—á–∏—â–∞–µ–º webhook –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
clear_webhook_and_wait()

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ —Å retry –ª–æ–≥–∏–∫–æ–π
def create_bot_with_retry():
    max_retries = 3
    for attempt in range(max_retries):
        try:
            bot = telebot.TeleBot(TOKEN)
            # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            bot.get_me()
            print(f"‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
            return bot
        except telebot.apihelper.ApiTelegramException as e:
            if "409" in str(e):
                print(f"‚ùå –ö–æ–Ω—Ñ–ª–∏–∫—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}). –ñ–¥—É...")
                time.sleep(15)  # –ñ–¥–µ–º –¥–æ–ª—å—à–µ
            else:
                raise e
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
            if attempt == max_retries - 1:
                raise e
            time.sleep(5)
    
    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫")

bot = create_bot_with_retry()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏
user_translations = {}
user_data = {}
saved_translations = {}
saved_explanations = {}

from deep_translator import GoogleTranslator, MyMemoryTranslator

def translate_text(text: str) -> str:
    """–°—Ç–∞–±–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥: —Å–Ω–∞—á–∞–ª–∞ deep-translator, –ø—Ä–∏ –æ—à–∏–±–∫–µ ‚Äî MyMemory."""
    # –µ—Å–ª–∏ –µ—Å—Ç—å –∏–≤—Ä–∏—Ç—Å–∫–∏–µ –±—É–∫–≤—ã ‚Üí —è–≤–Ω–æ —Å—Ç–∞–≤–∏–º –∫–æ–¥ —è–∑—ã–∫–∞ "iw"
    src = "iw" if HEB_RE.search(text) else "auto"

    try:
        return GoogleTranslator(source=src, target="ru").translate(text)
    except Exception as e1:
        print(f"[translate_text] deep-translator error: {e1}")
        try:
            return MyMemoryTranslator(source=src, target="ru").translate(text)
        except Exception as e2:
            print(f"[translate_text] MyMemory error: {e2}")
            return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞"

# ---- –æ—Ñ–ª–∞–π–Ω-—Ñ–æ–ª–±—ç–∫ –¥–ª—è "–û–±—ä—è—Å–Ω–∏—Ç—å" ----
IDOMS = {
    "◊ô◊ê◊ú◊ú◊î": "–°–ª–µ–Ω–≥: ¬´–¥–∞–≤–∞–π/–ø–æ–≥–Ω–∞–ª–∏/–Ω—É –∂–µ¬ª. –ú–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ.",
    "◊°◊ë◊ë◊î": "–°–ª–µ–Ω–≥: ¬´–æ–∫–µ–π, —Å—É–ø–µ—Ä, –Ω–æ—Ä–º¬ª. –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ.",
    "◊ë◊ê◊°◊î": "–°–ª–µ–Ω–≥: ¬´–æ–±–ª–æ–º, –Ω–µ–ø—Ä–∏—è—Ç–Ω–æ—Å—Ç—å¬ª.",
    "◊™◊õ◊ú◊°": "–°–ª–µ–Ω–≥: ¬´–ø–æ —Å—É—Ç–∏, –ø–æ —Ñ–∞–∫—Ç—É¬ª. –ü–∏—à—É—Ç –∏ –∫–∞–∫ ◊™◊õ◊ú◊≥◊°.",
    "◊õ◊§◊®◊î": "–õ–∞—Å–∫–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ: ¬´–¥—É—à–∞ –º–æ—è¬ª. –ú–æ–∂–µ—Ç –±—ã—Ç—å –∏ –≤ —à—É—Ç–∫—É.",
    "◊ê◊ô◊ü ◊û◊¶◊ë": "¬´–ù–∏ –∑–∞ —á—Ç–æ / –¥–∞ –Ω—É!¬ª ‚Äî —É–¥–∏–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–∫–∞–∑.",
    "◊ì◊ô ◊†◊ï": "¬´–•–≤–∞—Ç–∏—Ç —É–∂–µ / –¥–∞ –Ω—É¬ª. –õ—ë–≥–∫–æ–µ —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ.",
    "◊û◊î ◊†◊°◊í◊® ◊ê◊ô◊™◊ö": "¬´–ß—Ç–æ —Å —Ç–æ–±–æ–π –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç?¬ª ‚Äî —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω–æ–µ.",
}

def explain_local(he_text: str) -> str:
    tr = translate_text(he_text)
    hits = []
    low = he_text.replace("◊≥","").replace("'","").replace("`","")
    for k, note in IDOMS.items():
        if k in low or k.replace("◊≥","") in low:
            hits.append(f"‚Ä¢ *{k}* ‚Äî {note}")
    note_block = "\n".join(hits) if hits else "–°–ª–µ–Ω–≥/–∏–¥–∏–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    return (
        f"–ü–µ—Ä–µ–≤–æ–¥: {tr}\n\n"
        f"–°–ª–µ–Ω–≥/–∏–¥–∏–æ–º—ã:\n{note_block}\n\n"
        f"–ì—Ä–∞–º–º–∞—Ç–∏–∫–∞: —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω–∞—è —Ä–µ—á—å; –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –º–æ—Ä—Ñ–æ—Ä–∞–∑–±–æ—Ä–∞ (–∫–æ—Ä–Ω–∏/–±–∏–Ω—å—è–Ω—ã) –Ω—É–∂–µ–Ω –æ–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º."
    )


# ======= Firebase =======
from dotenv import load_dotenv
load_dotenv()

def _find_firebase_key():
    candidates = []
    env_path = os.getenv("FIREBASE_CREDENTIALS_PATH")
    if env_path:
        candidates.append(env_path)

    repo_file = os.path.join(
        os.path.dirname(__file__),
        "trivia-game-79e1b-firebase-adminsdk-fbsvc-20be34c499.json"
    )
    candidates.append(repo_file)
    candidates.append("/etc/secrets/firebase-key.json")

    for p in candidates:
        if p and os.path.exists(p):
            return p
    raise FileNotFoundError("–ù–µ –Ω–∞–π–¥–µ–Ω –∫–ª—é—á Firebase")

firebase_key_path = _find_firebase_key()
cred = credentials.Certificate(firebase_key_path)
firebase_admin.initialize_app(cred)
db = firestore.client()

# ======= –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ =======
ALLOWED_USERS = set()
def load_allowed_users():
    try:
        users_ref = db.collection("allowed_users").stream()
        for doc in users_ref:
            ALLOWED_USERS.add(int(doc.id))
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(ALLOWED_USERS)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Firebase")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

load_allowed_users()

@bot.message_handler(commands=['id'])
def send_user_id(message):
    bot.send_message(message.chat.id, f"üë§ –¢–≤–æ–π Telegram ID: `{message.from_user.id}`", parse_mode='Markdown')

# ======= –§–†–ê–ó–´ –î–ù–Ø (–∏–∑ —Ñ–∞–π–ª–∞ + –æ–¥–Ω–∞ —Ñ—Ä–∞–∑–∞ –Ω–∞ –¥–µ–Ω—å) =======
import json, os, hashlib
@bot.message_handler(commands=['quizstats'])
def quiz_stats(m):
    snap = _quiz_stats_ref(m.from_user.id).get()
    d = snap.to_dict() if snap.exists else {"total": 0, "correct": 0}
    bot.send_message(m.chat.id, f"–¢–≤–æ–π —Å—á—ë—Ç: {d.get('correct',0)}/{d.get('total',0)}")

@bot.message_handler(commands=['quizreset'])
def quiz_reset(m):
    _quiz_stats_ref(m.from_user.id).delete()
    bot.send_message(m.chat.id, "–°—á—ë—Ç —Å–±—Ä–æ—à–µ–Ω.")

# –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é tz –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã
tz = pytz.timezone('Asia/Jerusalem')
# ======= –§–†–ê–ó–´ –î–ù–Ø (–∏–∑ —Ñ–∞–π–ª–∞ + –æ–¥–Ω–∞ —Ñ—Ä–∞–∑–∞ –Ω–∞ –¥–µ–Ω—å) =======

# 0) –†–ï–ó–ï–†–í ‚Äî –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç/—Å–ª–æ–º–∞–ª—Å—è
FALLBACK_PHRASES = [
    {"he": "◊°◊ë◊ë◊î",              "ru": "–æ–∫–µ–π; –Ω–æ—Ä–º",                    "note": "—Ä–∞–∑–≥–æ–≤–æ—Ä–Ω–æ–µ ¬´–æ–∫¬ª"},
    {"he": "◊ê◊ô◊ü ◊ë◊¢◊ô◊î",          "ru": "–±–µ–∑ –ø—Ä–æ–±–ª–µ–º",                   "note": ""},
    {"he": "◊ô◊ê◊ú◊ú◊î, ◊†◊™◊ß◊ì◊ù",      "ru": "–Ω—É –ø–æ–µ—Ö–∞–ª–∏, –¥–≤–∏–≥–∞–µ–º—Å—è",         "note": ""},
    {"he": "◊ë◊ê ◊ú◊ô ◊ß◊§◊î",         "ru": "–º–Ω–µ —Ö–æ—á–µ—Ç—Å—è –∫–æ—Ñ–µ",              "note": "◊ë◊ê ◊ú◊ô ‚Äî ¬´–º–Ω–µ —Ö–æ—á–µ—Ç—Å—è¬ª"},
    {"he": "◊õ◊û◊î ◊ñ◊î ◊ô◊ï◊¶◊ê?",      "ru": "—Å–∫–æ–ª—å–∫–æ –≤—ã—Ö–æ–¥–∏—Ç?",              "note": "–ø—Ä–æ —Ü–µ–Ω—É/–∏—Ç–æ–≥"},
    {"he": "◊°◊í◊®◊™◊ô ◊§◊ô◊†◊î",        "ru": "–∑–∞–∫—Ä—ã–ª–∞ –≤–æ–ø—Ä–æ—Å; —Ä–∞–∑–æ–±—Ä–∞–ª–∞—Å—å",   "note": "—Å–ª–µ–Ω–≥"},
    {"he": "◊ô◊ê◊ú◊ú◊î, ◊ñ◊ñ◊™◊ô",       "ru": "–ª–∞–¥–Ω–æ, —è –ø–æ—à–ª–∞",                "note": "–±—É–∫–≤. ¬´–¥–≤–∏–Ω—É–ª–∞—Å—å¬ª"},
    {"he": "◊©◊†◊ô◊î, ◊ê◊†◊ô ◊ë◊ï◊ì◊ß◊™",   "ru": "—Å–µ–∫—É–Ω–¥—É, —è –ø—Ä–æ–≤–µ—Ä—é",            "note": ""},
]

# 1) –ó–∞–≥—Ä—É–∂–∞–µ–º –ë–î —Ñ—Ä–∞–∑ –∏–∑ JSON, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å; –∏–Ω–∞—á–µ ‚Äî —Ä–µ–∑–µ—Ä–≤
def load_phrase_db():
    path = os.getenv("PHRASES_FILE", "phrases.json")  # –º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    try:
        with open(path, "r", encoding="utf-8") as f:
            data = json.load(f)
        assert isinstance(data, list) and all(("he" in x and "ru" in x) for x in data)
        return data
    except Exception as e:
        print(f"[phrases] using FALLBACK (reason: {e})")
        return FALLBACK_PHRASES

phrase_db = load_phrase_db()

# 2) –û–¥–Ω–∞ –∏ —Ç–∞ –∂–µ —Ñ—Ä–∞–∑–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ‚Äî –¥–ª—è –≤—Å–µ—Ö (–ø–æ –¥–∞—Ç–µ –∏ TZ)
def _today_idx():
    today = datetime.now(tz).date().isoformat()
    h = int(hashlib.sha1(today.encode("utf-8")).hexdigest(), 16)
    return h % len(phrase_db)

def phrase_of_today():
    return phrase_db[_today_idx()]

def build_pod_message(item):
    return (
        "‚òÄÔ∏è ◊ë◊ï◊ß◊® ◊ò◊ï◊ë!\n–í–æ—Ç —Ç–µ–±–µ —Ñ—Ä–∞–∑–∞ –¥–Ω—è:\n\n"
        f"üó£ *{item['he']}*\n"
        f"üìò –ü–µ—Ä–µ–≤–æ–¥: _{item['ru']}_\n"
        f"üí¨ –ü–æ—è—Å–Ω–µ–Ω–∏–µ: {item.get('note','‚Äî')}"
    )

# 3) –ê–Ω—Ç–∏-–¥—É–±–ª–∏: –Ω–µ —Å–ª–∞—Ç—å –æ–¥–Ω–æ–π –∏ —Ç–æ–π –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–≤–∞–∂–¥—ã –∑–∞ –¥–µ–Ω—å
def _get_last_pod_date(user_id):
    doc = db.collection("users").document(str(user_id)).get()
    d = doc.to_dict() or {}
    return d.get("last_pod")

def _set_last_pod_date(user_id, date_iso):
    db.collection("users").document(str(user_id)).set({"last_pod": date_iso}, merge=True)

def send_phrase_of_the_day_now():
    item = phrase_of_today()
    today = datetime.now(tz).date().isoformat()
    msg = build_pod_message(item)

    recipients = ALLOWED_USERS  # —É —Ç–µ–±—è —É–∂–µ –≥—Ä—É–∑–∏—Ç—Å—è –∏–∑ Firestore
    for user_id in recipients:
        if _get_last_pod_date(user_id) == today:
            continue
        try:
            bot.send_message(user_id, msg, parse_mode="Markdown")
            _set_last_pod_date(user_id, today)
        except Exception as e:
            print(f"[pod] send failed for {user_id}: {e}")

# 4) –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 08:00 –ø–æ –ò–∑—Ä–∞–∏–ª—é
def _schedule_next_8am():
    now = datetime.now(tz)
    next8 = now.replace(hour=8, minute=0, second=0, microsecond=0)
    if now >= next8:
        next8 += timedelta(days=1)
    delay = (next8 - now).total_seconds()

    def _run():
        try:
            send_phrase_of_the_day_now()
        finally:
            _schedule_next_8am()  # –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –∑–∞–≤—Ç—Ä–∞

    threading.Timer(delay, _run).start()

# –í—ã–∑–≤–∞—Ç—å –û–î–ò–ù —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞:
_schedule_next_8am()

# (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø–∏–Ω–∫–∞ –∏–∑ —á–∞—Ç–∞)
@bot.message_handler(commands=['pod'])
def cmd_pod(m):
    send_phrase_of_the_day_now()
    bot.send_message(m.chat.id, "–§—Ä–∞–∑—É –¥–Ω—è —Ä–∞–∑–æ—Å–ª–∞–ª–∞ –≤—Å–µ–º (–∫—Ç–æ –µ—â—ë –Ω–µ –ø–æ–ª—É—á–∞–ª —Å–µ–≥–æ–¥–Ω—è).")

# 1) –†–µ–∑–µ—Ä–≤–Ω—ã–µ —Ñ—Ä–∞–∑—ã –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ phrases.json –Ω–µ –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è
DEFAULT_PHRASES = [
    {"he": "◊ú◊ê◊ò ◊ú◊ê◊ò", "ru": "–ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ / –ù–µ —Å–ø–µ—à–∏", "note": "–ü–æ–ø—É–ª—è—Ä–Ω–∞—è —Ñ—Ä–∞–∑–∞ ‚Äî –æ —Ç–µ—Ä–ø–µ–Ω–∏–∏, —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–∏."},
    {"he": "◊ô◊ê◊ú◊ú◊î", "ru": "–î–∞–≤–∞–π / –ù—É –∂–µ!", "note": "–ú–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–ª–µ–Ω–≥, –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é."},
    {"he": "◊ó◊ë◊ú ◊¢◊ú ◊î◊ñ◊û◊ü", "ru": "–ö—Ä—É—Ç–æ! / –û—Ç–ª–∏—á–Ω–æ!", "note": "–ë—É–∫–≤. '–ñ–∞–ª—å –≤—Ä–µ–º–µ–Ω–∏', –Ω–æ –≤ —Å–ª–µ–Ω–≥–µ ‚Äî '—Å—É–ø–µ—Ä'."},
    # –º–æ–∂–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å —Ç—É—Ç –µ—â—ë –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã—Ö –∫–∞–∫ –∑–∞–ø–∞—Å
]

def load_phrases(path: str) -> list:
    """–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ—Ä–∞–∑ –∏–∑ JSON; –µ—Å–ª–∏ –Ω–µ –≤—ã—à–ª–æ ‚Äî –±–µ—Ä—ë–º —Ä–µ–∑–µ—Ä–≤."""
    try:
        with open(path, "r", encoding="utf-8") as f:
            data = json.load(f)
            assert isinstance(data, list) and data, "phrases.json –ø—É—Å—Ç–æ–π"
            return data
    except Exception as e:
        print(f"[phrases] –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å {path}: {e}")
        return DEFAULT_PHRASES

# –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—É—Ç—å —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è PHRASES_PATH
PHRASES_PATH = os.getenv("PHRASES_PATH", "phrases.json")
phrase_db = load_phrases(PHRASES_PATH)

def get_today_phrase(dt=None):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–¥–Ω—É –∏ —Ç—É –∂–µ —Ñ—Ä–∞–∑—É –Ω–∞ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É (Asia/Jerusalem)."""
    dt = dt or datetime.now(tz)  # tz —É —Ç–µ–±—è —É–∂–µ –∑–∞–¥–∞–Ω: tz = pytz.timezone('Asia/Jerusalem')
    day_key = dt.strftime("%Y-%m-%d")
    # –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å —á–µ—Ä–µ–∑ —Ö—ç—à –¥–∞—Ç—ã
    h = hashlib.md5(day_key.encode("utf-8")).hexdigest()
    idx = int(h, 16) % len(phrase_db)
    return phrase_db[idx]

@bot.message_handler(commands=['daily'])
def send_daily_now(message):
    if ALLOWED_USERS and message.from_user.id not in ALLOWED_USERS:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏, –¥–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω üëÆ‚Äç‚ôÄÔ∏è")
        return

    phrase = get_today_phrase()
    msg = (
        f"‚òÄÔ∏è ◊ë◊ï◊ß◊® ◊ò◊ï◊ë!\n–ö–∞–∫ –¥–µ–ª–∞? –í–æ—Ç —Ç–µ–±–µ —Ñ—Ä–∞–∑–∞ –¥–Ω—è:\n\n"
        f"üó£ *{phrase['he']}*\n"
        f"üìò –ü–µ—Ä–µ–≤–æ–¥: _{phrase['ru']}_\n"
        f"üí¨ –ü–æ—è—Å–Ω–µ–Ω–∏–µ: {phrase['note']}"
    )
    bot.send_message(message.chat.id, msg, parse_mode='Markdown')

# ======= –†–ê–°–°–´–õ–ö–ê =======
def send_daily_phrase():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –æ–¥–Ω—É –∏ —Ç—É –∂–µ —Ñ—Ä–∞–∑—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å."""
    phrase = get_today_phrase()
    msg = (
        f"‚òÄÔ∏è ◊ë◊ï◊ß◊® ◊ò◊ï◊ë!\n–ö–∞–∫ –¥–µ–ª–∞? –í–æ—Ç —Ç–µ–±–µ —Ñ—Ä–∞–∑–∞ –¥–Ω—è:\n\n"
        f"üó£ *{phrase['he']}*\n"
        f"üìò –ü–µ—Ä–µ–≤–æ–¥: _{phrase['ru']}_\n"
        f"üí¨ –ü–æ—è—Å–Ω–µ–Ω–∏–µ: {phrase['note']}"
    )
    for user_id in ALLOWED_USERS:
        try:
            bot.send_message(user_id, msg, parse_mode='Markdown')
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ—Ä–∞–∑—ã –¥–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

def schedule_daily_phrase():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∏ —à–ª—ë–º –≤ 08:00 –ø–æ –ò–µ—Ä—É—Å–∞–ª–∏–º—É."""
    while True:
        now = datetime.datetime.now(tz)
        if now.hour == 8 and now.minute == 0:
            send_daily_phrase()
            time.sleep(60)  # —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–≤–∞–∂–¥—ã –≤ —Ç—É –∂–µ –º–∏–Ω—É—Ç—É
        time.sleep(1)

# ======= –ö–ù–û–ü–ö–ò =======
def get_keyboard():
    markup = InlineKeyboardMarkup()
    markup.row(
        InlineKeyboardButton("üß† –û–±—ä—è—Å–Ω–∏—Ç—å", callback_data="explain"),
        InlineKeyboardButton("üîÅ –ù–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥", callback_data="new")
    )
    return markup

def get_yes_no_keyboard():
    markup = InlineKeyboardMarkup()
    markup.row(
        InlineKeyboardButton("‚úÖ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏", callback_data="translate_forwarded"),
        InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel")
    )
    return markup

def check_access(user_id):
    return not ALLOWED_USERS or user_id in ALLOWED_USERS

# ======= –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò =======
@bot.message_handler(content_types=['text'])
def handle_text(message):
    if not check_access(message.from_user.id):
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏, –¥–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω üëÆ‚Äç‚ôÄÔ∏è")
        return
    
    if message.forward_from or message.forward_from_chat:
        user_data[message.chat.id] = {'forwarded_text': message.text.strip()}
        bot.send_message(message.chat.id, "üì© –ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –•–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏?", reply_markup=get_yes_no_keyboard())
        return

    try:
        orig = message.text.strip()
        user_translations[message.chat.id] = orig
        translated_text = translate_text(orig)

        bot.send_message(
            message.chat.id,
            f"üìò –ü–µ—Ä–µ–≤–æ–¥:\n*{translated_text}*",
            reply_markup=get_keyboard(),
            parse_mode='Markdown'
        )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: {e}")
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ ü´£")

@bot.message_handler(content_types=['voice', 'audio'])
def handle_voice(message):
    if not check_access(message.from_user.id):
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏, –¥–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω üëÆ‚Äç‚ôÄÔ∏è")
        return
        
    if message.forward_from or message.forward_from_chat:
        user_data[message.chat.id] = {'forwarded_audio': message}
        bot.send_message(message.chat.id, "üì© –ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ –∞—É–¥–∏–æ. –•–æ—Ç–∏—Ç–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∏ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏?", reply_markup=get_yes_no_keyboard())
        return

    process_audio(message)

def process_audio(message):
    try:
        # 1) –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ –µ—Å—Ç—å (.ogg —É –≥–æ–ª–æ—Å–æ–≤—ã—Ö –≤ Telegram)
        file_info = bot.get_file(
            message.voice.file_id if message.content_type == 'voice' else message.audio.file_id
        )
        data = bot.download_file(file_info.file_path)

        tmp_path = "voice.ogg"
        with open(tmp_path, "wb") as f:
            f.write(data)

        # 2) –ë–µ–∑ ffmpeg ‚Äî —Å—Ä–∞–∑—É –æ—Ç–¥–∞—ë–º .ogg –≤ Whisper
        with open(tmp_path, "rb") as audio_file:
            try:
                transcript = client.audio.transcriptions.create(
                    model="whisper-1",
                    file=audio_file,
                    language="he"
                )
            except Exception as api_err:
                if "overloaded" in str(api_err).lower():
                    bot.send_message(message.chat.id, "ü§ñ –°–µ–π—á–∞—Å —Å–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π —á—É—Ç—å –ø–æ–∑–∂–µ.")
                else:
                    bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ –∞—É–¥–∏–æ.")
                return

        hebrew_text = transcript.text
        translated_text = translate_text(hebrew_text)
        user_translations[message.chat.id] = hebrew_text

        bot.send_message(
            message.chat.id,
            f"üó£ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n_{hebrew_text}_\n\nüìò –ü–µ—Ä–µ–≤–æ–¥:\n*{translated_text}*",
            parse_mode='Markdown',
            reply_markup=get_keyboard()
        )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å –∞—É–¥–∏–æ: {e}")
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∞—É–¥–∏–æ üò¢")
    finally:
        # —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if os.path.exists("voice.ogg"):
            os.remove("voice.ogg")


@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    bot.answer_callback_query(call.id)

    if call.data == "explain":
        text = user_translations.get(call.message.chat.id)
        if not text:
            bot.send_message(call.message.chat.id, "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è.")
            return

        sys_prompt = (
            "–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω–æ–≥–æ –∏–≤—Ä–∏—Ç–∞. "
            "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ñ—Ä–∞–∑—É –Ω–∞ –∏–≤—Ä–∏—Ç–µ: –ø–µ—Ä–µ–≤–µ–¥–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –≤—ã–¥–µ–ª–∏ –∫–æ—Ä–µ–Ω—å, –±–∏–Ω—å—è–Ω, "
            "–≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ñ–æ—Ä–º—É –≥–ª–∞–≥–æ–ª–æ–≤; –æ–±—ä—è—Å–Ω–∏ —Å–ª–µ–Ω–≥/–∏–¥–∏–æ–º—ã –∏ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å; "
            "–¥–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è."
        )

        try:
            answer = ask_gpt(
                [
                    {"role": "system", "content": sys_prompt},
                    {"role": "user", "content": text},
                ],
                model=os.getenv("OPENAI_MODEL", "gpt-4o"),
            )
            
            if answer is None:
                # –ï—Å–ª–∏ OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º
                local = explain_local(text)
                bot.send_message(call.message.chat.id, f"üß† –û–±—ä—è—Å–Ω–µ–Ω–∏–µ (–æ—Ñ–ª–∞–π–Ω):\n{local}")
            else:
                bot.send_message(call.message.chat.id, f"üß† –û–±—ä—è—Å–Ω–µ–Ω–∏–µ:\n{answer}")
                
        except AuthenticationError:
            bot.send_message(call.message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –∫–ª—é—á–æ–º OpenAI. –ü—Ä–æ–≤–µ—Ä—å OPENAI_API_KEY.")
        except BadRequestError as e:
            print(f"[ask_gpt] BadRequest: {e}")
            bot.send_message(call.message.chat.id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è.")
        except Exception as e:
            print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–∏: {e}")
            # –§–æ–ª–±—ç–∫ –Ω–∞ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º
            local = explain_local(text)
            bot.send_message(call.message.chat.id, f"üß† –û–±—ä—è—Å–Ω–µ–Ω–∏–µ (–æ—Ñ–ª–∞–π–Ω):\n{local}")

    elif call.data == "new":
        text = user_translations.get(call.message.chat.id)
        if text:
            try:
                translated_text = translate_text(text)
                bot.send_message(
                    call.message.chat.id,
                    f"üìò –ù–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥:\n*{translated_text}*",
                    reply_markup=get_keyboard(),
                    parse_mode='Markdown'
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
                bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ ü´£")

    elif call.data == "translate_forwarded":
        chat_data = user_data.get(call.message.chat.id, {})
        if 'forwarded_text' in chat_data:
            text = chat_data['forwarded_text']
            user_translations[call.message.chat.id] = text
            translated_text = translate_text(text)
            bot.send_message(
                call.message.chat.id,
                f"üìò –ü–µ—Ä–µ–≤–æ–¥:\n*{translated_text}*",
                reply_markup=get_keyboard(),
                parse_mode='Markdown'
            )
        elif 'forwarded_audio' in chat_data:
            process_audio(chat_data['forwarded_audio'])

        if call.message.chat.id in user_data:
            del user_data[call.message.chat.id]

    elif call.data == "cancel":
        bot.send_message(call.message.chat.id, "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
        if call.message.chat.id in user_data:
            del user_data[call.message.chat.id]


# ======= GRACEFUL SHUTDOWN =======
def signal_handler(sig, frame):
    print('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç–∞...')
    bot.stop_polling()
    sys.exit(0)

signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)

# ======= –ó–ê–ü–£–°–ö =======
print("üöÄ AhlaBot –∑–∞–ø—É—â–µ–Ω —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–µ–π ‚úÖ")

def schedule_thread():
    schedule.every().day.at("08:00").do(send_daily_phrase)
    while True:
        schedule.run_pending()
        time.sleep(30)

threading.Thread(target=schedule_thread, daemon=True).start()

# üîí –ó–ê–©–ò–©–ï–ù–ù–´–ô –ó–ê–ü–£–°–ö
if __name__ == "__main__":
    try:
        print("‚è≥ –ó–∞–ø—É—Å–∫–∞—é infinity_polling...")
        bot.infinity_polling(timeout=20, long_polling_timeout=20, skip_pending=True, allowed_updates=['message','callback_query'])

    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)