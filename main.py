# --- –ò–ú–ü–û–†–¢–´ (–∫–æ—Ä–æ—Ç–∫–æ –∏ –±–µ–∑ –¥—É–±–ª–µ–π) ---
import os, sys, time, threading, signal, random, re, json, hashlib, string
from http.server import BaseHTTPRequestHandler, HTTPServer
import openai
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
import firebase_admin
from firebase_admin import credentials, firestore
import pytz
from datetime import datetime, timedelta, timezone
from dotenv import load_dotenv
import subprocess, tempfile
# ==== –¥–µ—Ç–µ–∫—Ç–æ—Ä –∏–≤—Ä–∏—Ç–∞/—Ä—É—Å—Å–∫–æ–≥–æ ====
HEB_RE = re.compile(r'[\u0590-\u05FF]')
CYR_RE = re.compile(r'[–ê-–Ø–∞-—è–Å—ë]')

def contains_hebrew(s: str) -> bool:
    return bool(s and HEB_RE.search(s))

def contains_cyrillic(s: str) -> bool:
    return bool(s and CYR_RE.search(s))

# ===== –ë–ê–ó–û–í–´–ï –ù–ê–°–¢–†–û–ô–ö–ò =====
load_dotenv()

ALLOWED_ADMINS = {1037123191}  # —Å—é–¥–∞ —Å–≤–æ–π ID –∏ ID –ø–æ–¥—Ä—É–≥/–¥–æ—á–µ—Ä–∏, –µ—Å–ª–∏ –Ω–∞–¥–æ
tz = pytz.timezone('Asia/Jerusalem')

# OpenAI
from openai import (
    OpenAI,
    APIConnectionError,
    RateLimitError,
    APIStatusError,
    AuthenticationError,
    BadRequestError,
)

openai.api_key = (os.getenv("OPENAI_API_KEY") or "").strip()
client = OpenAI(api_key=openai.api_key, timeout=30)

# Telegram bot
TOKEN = (os.getenv("TELEGRAM_TOKEN") or os.getenv("TELEGRAM_BOT_TOKEN") or "").strip()

def _mask_token(t: str) -> str:
    if not t: return "<empty>"
    head = t.split(":")[0]; tail = t[-4:] if len(t) >= 4 else t
    return f"{head}:***...***{tail}"

print(f"[BOOT] TOKEN: {_mask_token(TOKEN)}")
if not TOKEN or ":" not in TOKEN:
    print(f"[BOOT] TELEGRAM_BOT_TOKEN invalid. Read='{_mask_token(TOKEN)}' len={len(TOKEN)}")
    raise RuntimeError("TELEGRAM_BOT_TOKEN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–≤–µ—Ä–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å –≤ Render ‚Üí Settings ‚Üí Environment.")
else:
    print(f"[BOOT] TELEGRAM_BOT_TOKEN ok: {_mask_token(TOKEN)}")

# ===== Health-check HTTP-—Å–µ—Ä–≤–µ—Ä (–¥–ª—è Render) =====
class HealthHandler(BaseHTTPRequestHandler):
    def _ok_headers(self):
        self.send_response(200)
        self.send_header("Content-Type", "text/plain; charset=utf-8")
        self.end_headers()
    
    def do_GET(self):
        self._ok_headers()
        try:
            self.wfile.write(b"ok")
        except BrokenPipeError:
            pass
    
    def do_HEAD(self):
        self._ok_headers()

def run_health_server():
    port = int(os.environ.get("PORT", "10000"))
    server = HTTPServer(("0.0.0.0", port), HealthHandler)
    print(f"Health server on port {port}")
    server.serve_forever()

threading.Thread(target=run_health_server, daemon=True).start()

# ===== –õ–∏–∫–≤–∏–¥–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ webhook + –∞–Ω—Ç–∏-–¥—É–±–ª–∏–∫–∞—Ç—ã =====
def clear_webhook_and_wait():
    try:
        import requests
        url = f"https://api.telegram.org/bot{TOKEN}/deleteWebhook"
        response = requests.post(url)
        print(f"Webhook cleared: {response.json()}")
        print("‚è≥ –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤...")
        time.sleep(20)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ webhook: {e}")

clear_webhook_and_wait()

def create_bot_with_retry():
    max_retries = 3
    for attempt in range(max_retries):
        try:
            bot = telebot.TeleBot(TOKEN)
            bot.get_me()
            print(f"‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
            return bot
        except telebot.apihelper.ApiTelegramException as e:
            if "409" in str(e):
                print(f"‚ùå –ö–æ–Ω—Ñ–ª–∏–∫—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}). –ñ–¥—É...")
                time.sleep(15)
            else:
                raise e
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
            if attempt == max_retries - 1:
                raise e
            time.sleep(5)
    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫")

# === –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –∏ –æ–±—ä—è–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é ===
bot = create_bot_with_retry()
VERSION = "botargem-7"

# –∫–∞–∫–æ–π –¥–≤–∏–∂–æ–∫ –ø–µ—Ä–µ–≤–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
user_engine = {}  # chat_id -> "google" | "mymemory"

def _is_admin(user_id: int) -> bool:
    return int(user_id) in ALLOWED_ADMINS

# ===== Firebase (–ò–î–ï–ú–ü–û–¢–ï–ù–¢–ù–û!) =====
def _find_firebase_key():
    candidates = []
    if os.getenv("FIREBASE_CREDENTIALS_PATH"):
        candidates.append(os.getenv("FIREBASE_CREDENTIALS_PATH"))
    
    repo_file = os.path.join(os.path.dirname(__file__), "trivia-game-79e1b-firebase-adminsdk-fbsvc-20be34c499.json")
    candidates.append(repo_file)
    candidates.append(os.getenv("GOOGLE_APPLICATION_CREDENTIALS") or "firebase-key.json")
    candidates.append("/etc/secrets/firebase-key.json")
    
    for p in candidates:
        if p and os.path.exists(p):
            return p
    raise FileNotFoundError("–ù–µ –Ω–∞–π–¥–µ–Ω –∫–ª—é—á Firebase")

firebase_key_path = _find_firebase_key()
if not firebase_admin._apps:
    cred = credentials.Certificate(firebase_key_path)
    app = firebase_admin.initialize_app(cred)
else:
    app = firebase_admin.get_app()

db = firestore.client(app=app)
print(f"üî• Firebase –ø–æ–¥–∫–ª—é—á–µ–Ω: app={app.name}")

# ===== USERS: –∞–≤—Ç–æ–∫–∞—Ä—Ç–æ—á–∫–∞ –∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é =====
def _ensure_user(user):
    """–°–æ–∑–¥–∞–µ—Ç/–æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Firebase"""
    uid = str(user.id)
    db.collection("users").document(uid).set({
        "username": user.username or "",
        "first_name": user.first_name or "",
        "last_name": user.last_name or "",
        "sub_pod": True,  # –§—Ä–∞–∑–∞ –¥–Ω—è: –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω–∞
        "sub_fact": True,  # –§–∞–∫—Ç –¥–Ω—è: –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á—ë–Ω
        "last_seen": datetime.utcnow().isoformat(),
    }, merge=True)
def _send_explanation_guard(chat_id: int, body: str, offline: bool = False):
    """
    –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–∏–ª—Å—è —Ü–µ–ª–∏–∫–æ–º –Ω–∞ –∏–≤—Ä–∏—Ç–µ (–±–µ–∑ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã) ‚Äî –Ω–µ —à–ª—ë–º ¬´–ø—Ä–æ—Å—Ç—ã–Ω—é¬ª,
    –∞ –¥–∞—ë–º –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ò–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ.
    """
    if contains_hebrew(body) and not contains_cyrillic(body):
        bot.send_message(
            chat_id,
            "üõ† –ü—Ä–æ–∏–∑–æ—à—ë–ª —Å–±–æ–π: –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤—ã—à–ª–æ –Ω–∞ –∏–≤—Ä–∏—Ç–µ.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –Ω–∞–∂–∞—Ç—å ¬´üß† –û–±—ä—è—Å–Ω–∏—Ç—å¬ª."
        )
        return
    prefix = "üß† –û–±—ä—è—Å–Ω–µ–Ω–∏–µ (–æ—Ñ–ª–∞–π–Ω):\n" if offline else "üß† –û–±—ä—è—Å–Ω–µ–Ω–∏–µ:\n"
    bot.send_message(chat_id, prefix + body)
# ===== –î–û–°–¢–£–ü: —Ç–æ–ª—å–∫–æ ID –∏–∑ allowed_users =====
ALLOWED_USERS = set()

def load_allowed_users():
    try:
        users_ref = db.collection("allowed_users").stream()
        for doc in users_ref:
            ALLOWED_USERS.add(int(doc.id))
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(ALLOWED_USERS)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Firebase")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

load_allowed_users()

def check_access(user_id: int) -> bool:
    # –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ–º + –ª–æ–≥–∏—Ä—É–µ–º, —á—Ç–æ–±—ã —Ç–æ—á–Ω–æ –≤–∏–¥–µ—Ç—å –≤ Render Logs
    try:
        print(f"[access] ALLOW user={user_id}")
    except Exception:
        pass
    return True

# ===== –ê–¥–º–∏–Ω: –≤–ª–∞–¥–µ–ª–µ—Ü (—Ç–æ–ª—å–∫–æ —Ç—ã) =====
OWNER_ID = int(os.getenv("OWNER_ID", "0") or "0")
if not OWNER_ID and ALLOWED_USERS:
    OWNER_ID = sorted(ALLOWED_USERS)[0]
print(f"üëë OWNER_ID = {OWNER_ID or '–Ω–µ –∑–∞–¥–∞–Ω'}")

def is_owner(user_id: int) -> bool:
    return OWNER_ID and (user_id == OWNER_ID)

# ===== –õ–ò–ú–ò–¢–´ / –ü–†–ï–ú–ò–£–ú / –î–û–ù–ê–¢–´ =====
FREE_LIMIT_TEXT = 3
FREE_LIMIT_AUDIO = 3
TEXT_MAX_LEN_PER_MSG = 500
TEXT_MAX_LEN_PER_DAY = 1500
AUDIO_MAX_SEC_PER_MSG = 60
AUDIO_MAX_SEC_PER_DAY = 180

TEXT_TOO_LONG_MSG = f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º {TEXT_MAX_LEN_PER_MSG} —Å–∏–º–≤–æ–ª–æ–≤ –∑–∞ —Ä–∞–∑. –†–∞–∑–±–µ–π –Ω–∞ —á–∞—Å—Ç–∏ üôÇ"
AUDIO_TOO_LONG_MSG = f"‚ö†Ô∏è –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º {AUDIO_MAX_SEC_PER_MSG} —Å–µ–∫—É–Ω–¥ –∑–∞ —Ä–∞–∑. –ü–æ–ø—Ä–æ–±—É–π –∫–æ—Ä–æ—á–µ üôÇ"

DONATE_LINKS = [
    ("üç∞ PayBox", "https://links.payboxapp.com/FqQZPo2wfWb"),
]

# –≥–¥–µ –∏—Å–∫–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–ª—è Bit
BIT_QR_IMAGE = (
    os.getenv("BIT_QR_LOCAL_PATH") or 
    os.path.join(os.path.dirname(__file__), "bit_qr.jpg")
)

def _usage_doc_ref(user_id: int, date_iso: str):
    return db.collection("usage").document(f"{user_id}_{date_iso}")

def _today_iso():
    return datetime.now(tz).date().isoformat()

def get_usage(user_id: int) -> dict:
    today = _today_iso()
    try:
        ref = _usage_doc_ref(user_id, today)
        snap = ref.get()
        if snap.exists:
            d = snap.to_dict()
        else:
            d = {"text": 0, "audio": 0, "text_chars": 0, "audio_secs": 0}
            ref.set(d)
        
        d.setdefault("text", 0)
        d.setdefault("audio", 0)
        d.setdefault("text_chars", 0)
        d.setdefault("audio_secs", 0)
        return d
    except Exception:
        # –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–æ–ª–±—ç–∫
        global _LOCAL_USAGE
        try:
            _LOCAL_USAGE
        except NameError:
            _LOCAL_USAGE = {}
        
        info = _LOCAL_USAGE.setdefault(user_id, {})
        if info.get("date") != today:
            info.update({"date": today, "text": 0, "audio": 0, "text_chars": 0, "audio_secs": 0})
        return info

def save_usage(user_id: int, data: dict):
    today = _today_iso()
    try:
        _usage_doc_ref(user_id, today).set(data, merge=True)
    except Exception:
        global _LOCAL_USAGE
        _LOCAL_USAGE[user_id] = {**_LOCAL_USAGE.get(user_id, {}), **data, "date": today}

# ===== PREMIUM (—Ä—É—á–Ω–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ –ø–æ —á–µ–∫—É) =====
def is_premium(user_id: int) -> bool:
    try:
        doc = db.collection("premium_users").document(str(user_id)).get()
        d = doc.to_dict() or {}
        if not d.get("active"):
            return False
        
        until = d.get("until")
        if until:
            return datetime.now(tz).date().isoformat() <= until
        return True
    except Exception:
        return False

def can_use(user_id: int, kind: str) -> bool:
    # –ø–æ 3 —à—Ç/–¥–µ–Ω—å; –ø—Ä–µ–º–∏—É–º ‚Äî –±–µ–∑–ª–∏–º–∏—Ç
    if is_premium(user_id):
        return True
    
    d = get_usage(user_id)
    if kind == "text":
        if d["text"] < FREE_LIMIT_TEXT:
            d["text"] += 1
            save_usage(user_id, d)
            return True
        return False
    
    if kind == "audio":
        if d["audio"] < FREE_LIMIT_AUDIO:
            d["audio"] += 1
            save_usage(user_id, d)
            return True
        return False
    
    return False

def can_use_text_volume(user_id: int, msg_len: int) -> tuple[bool, str]:
    if is_premium(user_id):
        if msg_len > 2000:
            return False, "‚ö†Ô∏è –û—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –†–∞–∑–±–µ–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞."
        return True, ""
    
    if msg_len > TEXT_MAX_LEN_PER_MSG:
        return False, TEXT_TOO_LONG_MSG
    
    d = get_usage(user_id)
    if d["text_chars"] + msg_len > TEXT_MAX_LEN_PER_DAY:
        left = max(0, TEXT_MAX_LEN_PER_DAY - d["text_chars"])
        return False, f"üö´ –õ–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏—Å—á–µ—Ä–ø–∞–Ω. –û—Å—Ç–∞–ª–æ—Å—å: {left}/{TEXT_MAX_LEN_PER_DAY}. –ó–∞–≤—Ç—Ä–∞ –æ–±–Ω—É–ª–∏—Ç—Å—è."
    
    d["text_chars"] += msg_len
    save_usage(user_id, d)
    return True, ""

def can_use_audio_volume(user_id: int, duration_sec: int) -> tuple[bool, str]:
    if is_premium(user_id):
        if duration_sec > 600:
            return False, "‚ö†Ô∏è –û—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ –∞—É–¥–∏–æ. –°–¥–µ–ª–∞–π –∫–æ—Ä–æ—á–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞."
        return True, ""
    
    if duration_sec > AUDIO_MAX_SEC_PER_MSG:
        return False, AUDIO_TOO_LONG_MSG
    
    d = get_usage(user_id)
    if d["audio_secs"] + duration_sec > AUDIO_MAX_SEC_PER_DAY:
        left = max(0, AUDIO_MAX_SEC_PER_DAY - d["audio_secs"])
        return False, f"üö´ –õ–∏–º–∏—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞—É–¥–∏–æ –∏—Å—á–µ—Ä–ø–∞–Ω. –û—Å—Ç–∞–ª–æ—Å—å: {left} —Å–µ–∫. –∏–∑ {AUDIO_MAX_SEC_PER_DAY}. –ó–∞–≤—Ç—Ä–∞ –æ–±–Ω—É–ª–∏—Ç—Å—è."
    
    d["audio_secs"] += duration_sec
    save_usage(user_id, d)
    return True, ""

def limit_msg(kind):
    if kind == "text":
        return "üö´ –õ–∏–º–∏—Ç *—Ç–µ–∫—Å—Ç–æ–≤—ã—Ö* –ø–µ—Ä–µ–≤–æ–¥–æ–≤ (3) –∏—Å—á–µ—Ä–ø–∞–Ω. üîÑ –°–±—Ä–æ—Å –≤ –ø–æ–ª–Ω–æ—á—å. –ù—É–∂–µ–Ω –±–µ–∑–ª–∏–º–∏—Ç? /premium"
    else:
        return "üö´ –õ–∏–º–∏—Ç *–∞—É–¥–∏–æ* –ø–µ—Ä–µ–≤–æ–¥–æ–≤ (3) –∏—Å—á–µ—Ä–ø–∞–Ω. üîÑ –°–±—Ä–æ—Å –≤ –ø–æ–ª–Ω–æ—á—å. –ù—É–∂–µ–Ω –±–µ–∑–ª–∏–º–∏—Ç? /premium"

# ===== –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫–∏ =====
from deep_translator import GoogleTranslator, MyMemoryTranslator

def translate_text(text: str) -> str:
    """–°—Ç–∞–±–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥: —Å–Ω–∞—á–∞–ª–∞ deep-translator, –ø—Ä–∏ –æ—à–∏–±–∫–µ ‚Äî MyMemory."""
    src = "iw" if HEB_RE.search(text) else "auto"
    try:
        return GoogleTranslator(source=src, target="ru").translate(text)
    except Exception as e1:
        print(f"[translate_text] deep-translator error: {e1}")
        try:
            return MyMemoryTranslator(source=src, target="ru").translate(text)
        except Exception as e2:
            print(f"[translate_text] MyMemory error: {e2}")
            return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞"

def translate_with_engine(text: str, engine: str) -> tuple[str, str]:
    """–ü–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–æ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –¥–≤–∏–∂–∫–æ–º. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–ø–µ—Ä–µ–≤–æ–¥, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π_–¥–≤–∏–∂–æ–∫)."""
    src = "iw" if HEB_RE.search(text) else "auto"
    try:
        if engine == "mymemory":
            return MyMemoryTranslator(source=src, target="ru").translate(text), "mymemory"
        else:
            return GoogleTranslator(source=src, target="ru").translate(text), "google"
    except Exception as e:
        other = "google" if engine == "mymemory" else "mymemory"
        try:
            if other == "mymemory":
                return MyMemoryTranslator(source=src, target="ru").translate(text), "mymemory"
            else:
                return GoogleTranslator(source=src, target="ru").translate(text), "google"
        except Exception as e2:
            print(f"[translate_with_engine] –æ–±–∞ —É–ø–∞–ª–∏: {e} / {e2}")
            return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞", engine

# === –§–∏–ª—å—Ç—Ä ¬´–æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ–≥–æ¬ª —Ç–µ–∫—Å—Ç–∞ ===
HEB = r"\u0590-\u05FF"
LAT = r"A-Za-z"
CYR = r"–ê-–Ø–∞-—è–Å—ë"
LETTER_RE = re.compile(fr"[{HEB}{LAT}{CYR}]")
PUNCT = set(string.punctuation + "‚Ä¶‚Äî‚Äì¬´¬ª""'‚Äö¬∑‚Ä¢")

def _strip_noise(s: str) -> str:
    # —É–±–∏—Ä–∞–µ–º –Ω–µ–≤–∏–¥–∏–º—ã–µ zero-width –∏ –ø—Ä–æ–±–µ–ª—ã –ø–æ –∫—Ä–∞—è–º
    return (s or "").replace("\u200d", "").replace("\u200c", "").strip()

def _looks_like_only_punct_or_emoji(s: str) -> bool:
    # –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –±—É–∫–≤—ã, –∏ –≤—Å–µ —Å–∏–º–≤–æ–ª—ã ‚Äî –Ω–µ –±—É–∫–≤–µ–Ω–Ω–æ-—Ü–∏—Ñ—Ä–æ–≤—ã–µ (–ø—É–Ω–∫—Ç—É–∞—Ü–∏—è/—ç–º–æ–¥–∑–∏)
    no_letters = LETTER_RE.search(s) is None
    only_non_alnum = all((not ch.isalnum()) for ch in s)
    return no_letters and only_non_alnum

def is_meaningful_text(s: str) -> bool:
    s = _strip_noise(s)
    if not s:
        return False
    if s.startswith("/"):  # –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        return True
    if len(s) == 1 and not s.isalnum():
        return False  # –æ–¥–∏–Ω–æ—á–Ω–∞—è —Ç–æ—á–∫–∞ –∏ —Ç.–ø.
    if _looks_like_only_punct_or_emoji(s):
        return False
    # –æ–¥–Ω–æ—Å–∏–º–≤–æ–ª—å–Ω—ã–µ ¬´—Å–ª–æ–≤–∞¬ª –±–µ–∑ –±—É–∫–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "1", "#") ‚Äî –æ—Ç–∫–ª–æ–Ω—è–µ–º
    if len(s) < 2 and LETTER_RE.search(s) is None:
        return False
    return True

# ---- –æ—Ñ–ª–∞–π–Ω-—Ñ–æ–ª–±—ç–∫ –¥–ª—è "–û–±—ä—è—Å–Ω–∏—Ç—å" ----
IDIOMS = {
    "◊ô◊ê◊ú◊ú◊î": "–°–ª–µ–Ω–≥: ¬´–¥–∞–≤–∞–π/–ø–æ–≥–Ω–∞–ª–∏/–Ω—É –∂–µ¬ª.",
    "◊°◊ë◊ë◊î": "–°–ª–µ–Ω–≥: ¬´–æ–∫–µ–π, —Å—É–ø–µ—Ä, –Ω–æ—Ä–º¬ª.",
    "◊ë◊ê◊°◊î": "–°–ª–µ–Ω–≥: ¬´–æ–±–ª–æ–º, –Ω–µ–ø—Ä–∏—è—Ç–Ω–æ—Å—Ç—å¬ª.",
    "◊™◊õ◊ú◊°": "–°–ª–µ–Ω–≥: ¬´–ø–æ —Å—É—Ç–∏, –ø–æ —Ñ–∞–∫—Ç—É¬ª.",
    "◊õ◊§◊®◊î": "–õ–∞—Å–∫–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ: ¬´–¥—É—à–∞ –º–æ—è¬ª.",
    "◊ê◊ô◊ü ◊û◊¶◊ë": "¬´–ù–∏ –∑–∞ —á—Ç–æ / –¥–∞ –Ω—É!¬ª ‚Äî —É–¥–∏–≤–ª–µ–Ω–∏–µ/–æ—Ç–∫–∞–∑.",
    "◊ì◊ô ◊†◊ï": "¬´–•–≤–∞—Ç–∏—Ç —É–∂–µ / –¥–∞ –Ω—É¬ª.",
    "◊û◊î ◊†◊°◊í◊® ◊ê◊ô◊™◊ö": "¬´–ß—Ç–æ —Å —Ç–æ–±–æ–π –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç?¬ª ‚Äî —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω–æ–µ.",
}

def explain_local(he_text: str) -> str:
    tr = translate_text(he_text)
    hits = []
    low = he_text.replace("◊≥", "").replace("'", "").replace("", "")
    
    for k, note in IDIOMS.items():
        if k in low or k.replace("◊≥", "") in low:
            hits.append(f"‚Ä¢ *{k}* ‚Äî {note}")
    
    note_block = "\n".join(hits) if hits else "–°–ª–µ–Ω–≥/–∏–¥–∏–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    
    return (
        f"–ü–µ—Ä–µ–≤–æ–¥: {tr}\n\n"
        f"–°–ª–µ–Ω–≥/–∏–¥–∏–æ–º—ã:\n{note_block}\n\n"
        f"–ì—Ä–∞–º–º–∞—Ç–∏–∫–∞: —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω–∞—è —Ä–µ—á—å; –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –º–æ—Ä—Ñ–æ—Ä–∞–∑–±–æ—Ä–∞ –Ω—É–∂–µ–Ω –æ–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º."
    )

# ===== –ê—É–¥–∏–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ =====
def _tg_download_to_tmp(message):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç voice/audio/document ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Ñ–∞–π–ª—É."""
    if message.voice:
        file_id = message.voice.file_id
        ext = ".ogg"
    elif message.audio:
        file_id = message.audio.file_id
        ext = os.path.splitext(message.audio.file_name or "")[1] or ".m4a"
    elif message.document:
        file_id = message.document.file_id
        ext = os.path.splitext(message.document.file_name or "")[1] or ".bin"
    else:
        raise RuntimeError("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∞—É–¥–∏–æ")
    
    f = bot.get_file(file_id)
    raw = bot.download_file(f.file_path)
    fd, path = tempfile.mkstemp(prefix="audio_", suffix=ext)
    os.close(fd)
    
    with open(path, "wb") as out:
        out.write(raw)
    return path

def _ensure_ogg(input_path):
    """–ï—Å–ª–∏ —É–∂–µ ogg/opus ‚Äî –≤–µ—Ä–Ω—ë–º –∫–∞–∫ –µ—Å—Ç—å. –ò–Ω–∞—á–µ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä—É–µ–º –≤ ogg 16kHz mono."""
    low = input_path.lower()
    if low.endswith(".ogg") or low.endswith(".oga"):
        return input_path
    
    out_path = os.path.splitext(input_path)[0] + ".ogg"
    subprocess.run(
        ["ffmpeg", "-y", "-i", input_path, "-ar", "16000", "-ac", "1", "-c:a", "libopus", out_path],
        check=True,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE
    )
    return out_path

def process_audio(message):
    chat_id = message.chat.id
    try:
        # 1) —Å–∫–∞—á–∞–ª–∏ voice/audio/document
        local_file = _tg_download_to_tmp(message)
        # 2) –ø—Ä–∏–≤–µ–ª–∏ –∫ ogg 16kHz mono (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        file_for_stt = _ensure_ogg(local_file)

        # 3) —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏ —Ä–µ—á—å ‚Üí —Ç–µ–∫—Å—Ç
        with open(file_for_stt, "rb") as f:
            tr = client.audio.transcriptions.create(
                model="gpt-4o-mini-transcribe",
                file=f
            )
        text = getattr(tr, "text", "").strip()

        if not text:
            bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å.")
            return

        # üîπ –ù–û–í–û–ï: —Ñ–∏–ª—å—Ç—Ä ‚Äî –µ—Å–ª–∏ –≤ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ –Ω–µ—Ç –∏–≤—Ä–∏—Ç–∞, –≤–µ–∂–ª–∏–≤–æ –≤—ã—Ö–æ–¥–∏–º
        if not contains_hebrew(text):
            bot.send_message(
                chat_id,
                "üå∏ –Ø –ø–µ—Ä–µ–≤–æ–∂—É *—Ç–æ–ª—å–∫–æ —Å –∏–≤—Ä–∏—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π*.\n"
                "–ü—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞—É–¥–∏–æ –Ω–∞ –∏–≤—Ä–∏—Ç–µ.",
                parse_mode="Markdown"
            )
            return

        # 4) –ø–µ—Ä–µ–≤–æ–¥ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        translated = translate_text(text)

        # 5) —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–æ–∫ ¬´üß† –û–±—ä—è—Å–Ω–∏—Ç—å¬ª –∏ ¬´üîÅ –ù–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥¬ª
        user_translations[chat_id] = text
        user_engine[chat_id] = "google"

        # 6) –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å—ë –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º + –∫–Ω–æ–ø–∫–∏
        msg = (
            f"üìù –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞:\n{text}\n\n"
            f"üìò –ü–µ—Ä–µ–≤–æ–¥:\n*{translated}*"
        )
        bot.send_message(chat_id, msg, parse_mode="Markdown", reply_markup=get_keyboard())

        # 7) –∏—Å—Ç–æ—Ä–∏—è
        try:
            add_history(message.from_user.id, "audio", text, translated)
        except Exception as e:
            print("[history audio] err:", e)

    except Exception as e:
        print("–û—à–∏–±–∫–∞ –∞—É–¥–∏–æ:", e)
        bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ –∞—É–¥–∏–æ.")


# ===== –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ =====
def _history_ref(user_id: int):
    return db.collection("users").document(str(user_id)).collection("history")

def add_history(user_id: int, kind: str, source: str, result: str):
    try:
        _history_ref(user_id).add({
            "ts": datetime.utcnow().isoformat(),
            "kind": kind,  # "text" | "audio"
            "source": (source or "")[:4000],
            "result": (result or "")[:4000],
        })
    except Exception as e:
        print("[history] err:", e)

# ===== UI-–∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ =====
def get_keyboard():
    markup = InlineKeyboardMarkup()
    markup.row(
        InlineKeyboardButton("üß† –û–±—ä—è—Å–Ω–∏—Ç—å", callback_data="explain"),
        InlineKeyboardButton("üîÅ –ù–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥", callback_data="new")
    )
    return markup

def get_yes_no_keyboard():
    markup = InlineKeyboardMarkup()
    markup.row(
        InlineKeyboardButton("‚úÖ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏", callback_data="translate_forwarded"),
        InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel")
    )
    return markup

# === –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞ ===
receipt_state = {}  # chat_id -> {"provider": "paybox", "ts": datetime.utcnow().isoformat()}

# PayBox: —Ä–∞—Å–ø–æ–∑–Ω–∞—ë–º —Å—Å—ã–ª–∫—É –∏–ª–∏ ¬´–ø—Ä–∏–∑–Ω–∞–∫–∏¬ª –≤ —Ç–µ–∫—Å—Ç–µ
PAYBOX_URL_RE = re.compile(r"https?://\S*payboxapp\.com/\S+", re.I)
AMOUNT_RE = re.compile(r"(\d+[.,]?\d*)\s*(‚Ç™|—à–µ–∫|nis|◊©◊¥◊ó)", re.I)  # —á–∏—Å–ª–æ + –≤–∞–ª—é—Ç–∞/‚Ç™

# === –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===
user_translations = {}
user_data = {}

# ===== –§–†–ê–ó–ê –î–ù–Ø =====
FALLBACK_PHRASES = [
    {"he": "◊°◊ë◊ë◊î", "ru": "–æ–∫–µ–π; –Ω–æ—Ä–º", "note": "—Ä–∞–∑–≥–æ–≤–æ—Ä–Ω–æ–µ ¬´–æ–∫¬ª"},
    {"he": "◊ê◊ô◊ü ◊ë◊¢◊ô◊î", "ru": "–±–µ–∑ –ø—Ä–æ–±–ª–µ–º", "note": ""},
    {"he": "◊ô◊ê◊ú◊ú◊î, ◊†◊™◊ß◊ì◊ù", "ru": "–Ω—É –ø–æ–µ—Ö–∞–ª–∏, –¥–≤–∏–≥–∞–µ–º—Å—è", "note": ""},
    {"he": "◊ë◊ê ◊ú◊ô ◊ß◊§◊î", "ru": "–º–Ω–µ —Ö–æ—á–µ—Ç—Å—è –∫–æ—Ñ–µ", "note": "◊ë◊ê ◊ú◊ô ‚Äî ¬´–º–Ω–µ —Ö–æ—á–µ—Ç—Å—è¬ª"},
    {"he": "◊õ◊û◊î ◊ñ◊î ◊ô◊ï◊¶◊ê?", "ru": "—Å–∫–æ–ª—å–∫–æ –≤—ã—Ö–æ–¥–∏—Ç?", "note": "–ø—Ä–æ —Ü–µ–Ω—É/–∏—Ç–æ–≥"},
    {"he": "◊°◊í◊®◊™◊ô ◊§◊ô◊†◊î", "ru": "–∑–∞–∫—Ä—ã–ª–∞ –≤–æ–ø—Ä–æ—Å; —Ä–∞–∑–æ–±—Ä–∞–ª–∞—Å—å", "note": "—Å–ª–µ–Ω–≥"},
    {"he": "◊ô◊ê◊ú◊ú◊î, ◊ñ◊ñ◊™◊ô", "ru": "–ª–∞–¥–Ω–æ, —è –ø–æ—à–ª–∞", "note": "–±—É–∫–≤. ¬´–¥–≤–∏–Ω—É–ª–∞—Å—å¬ª"},
    {"he": "◊©◊†◊ô◊î, ◊ê◊†◊ô ◊ë◊ï◊ì◊ß◊™", "ru": "—Å–µ–∫—É–Ω–¥—É, —è –ø—Ä–æ–≤–µ—Ä—é", "note": ""},
]

def load_phrase_db():
    path = os.getenv("PHRASES_FILE", "phrases.json")
    try:
        with open(path, "r", encoding="utf-8") as f:
            data = json.load(f)
        assert isinstance(data, list) and all(("he" in x and "ru" in x) for x in data)
        print(f"[phrases] loaded {len(data)} from {path}")
        return data
    except Exception as e:
        print(f"[phrases] using FALLBACK (reason: {e})")
        return FALLBACK_PHRASES

phrase_db = load_phrase_db()

def _today_idx():
    today = datetime.now(tz).date().isoformat()
    h = int(hashlib.sha1(today.encode("utf-8")).hexdigest(), 16)
    return h % len(phrase_db)

def phrase_of_today():
    return phrase_db[_today_idx()]

def build_pod_message(item):
    return (
        "‚òÄÔ∏è ◊ë◊ï◊ß◊® ◊ò◊ï◊ë!\n–í–æ—Ç —Ç–µ–±–µ —Ñ—Ä–∞–∑–∞ –¥–Ω—è:\n\n"
        f"üó£ *{item['he']}*\n"
        f"üìò –ü–µ—Ä–µ–≤–æ–¥: _{item['ru']}_\n"
        f"üí¨ –ü–æ—è—Å–Ω–µ–Ω–∏–µ: {item.get('note', '‚Äî')}"
    )

def _get_last_pod_date(user_id):
    doc = db.collection("users").document(str(user_id)).get()
    d = doc.to_dict() or {}
    return d.get("last_pod")

def _set_last_pod_date(user_id, date_iso):
    db.collection("users").document(str(user_id)).set({"last_pod": date_iso}, merge=True)

def send_phrase_of_the_day_now():
    item = phrase_of_today()
    today = datetime.now(tz).date().isoformat()
    msg = build_pod_message(item)
    
    # –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, —É –∫–æ–≥–æ –≤–∫–ª—é—á–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ sub_pod
    try:
        recipients = [int(doc.id) for doc in db.collection("users").where("sub_pod", "==", True).stream()]
    except Exception as e:
        print(f"[pod] recipients err: {e}")
        recipients = []
    
    for user_id in recipients:
        if _get_last_pod_date(user_id) == today:
            continue
        try:
            bot.send_message(user_id, msg, parse_mode="Markdown")
            _set_last_pod_date(user_id, today)
        except Exception as e:
            print(f"[pod] send failed for {user_id}: {e}")

def _schedule_next_8am():
    now = datetime.now(tz)
    next8 = now.replace(hour=8, minute=0, second=0, microsecond=0)
    if now >= next8:
        next8 += timedelta(days=1)
    delay = (next8 - now).total_seconds()
    
    def _run():
        try:
            send_phrase_of_the_day_now()
        finally:
            _schedule_next_8am()
    
    threading.Timer(delay, _run).start()

_schedule_next_8am()

# ===== –§–ê–ö–¢ –î–ù–Ø (20:00) =====
FALLBACK_FACTS = [
    {"he": "◊î◊û◊ô◊ú◊î ◊©◊ú◊ï◊ù ◊û◊©◊û◊©◊™ ◊õ◊ë◊®◊õ◊î ◊ï◊í◊ù ◊õ◊§◊®◊ô◊ì◊î.", "ru": "¬´–®–∞–ª–æ–º¬ª ‚Äî –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, –∏ –ø—Ä–æ—â–∞–Ω–∏–µ.", "note": "–¢–∞–∫–∂–µ –æ–∑–Ω–∞—á–∞–µ—Ç ¬´–º–∏—Ä¬ª."},
]

def _load_facts_file():
    path = os.getenv("FACTS_FILE", "facts.json")
    try:
        with open(path, "r", encoding="utf-8") as f:
            arr = json.load(f)
        if isinstance(arr, list) and arr:
            return arr
    except Exception as e:
        print(f"[facts] fallback: {e}")
    return FALLBACK_FACTS

FACTS_DB = _load_facts_file()

def _random_fact():
    try:
        docs = list(db.collection("facts").stream())
        if docs:
            d = random.choice(docs).to_dict()
            return {"he": d.get("he", ""), "ru": d.get("ru", ""), "note": d.get("note", "")}
    except Exception as e:
        print(f"[facts] FS err: {e}")
    return random.choice(FACTS_DB)

def build_fact_message(item):
    msg = f"üìú *–§–∞–∫—Ç –¥–Ω—è*\n\nüó£ {item.get('he', '')}\nüìò –ü–µ—Ä–µ–≤–æ–¥: {item.get('ru', '')}"
    if item.get("note"):
        msg += f"\nüí° {item['note']}"
    return msg

def _get_last_fact_date(user_id):
    doc = db.collection("users").document(str(user_id)).get()
    d = doc.to_dict() or {}
    return d.get("last_fact")

def _set_last_fact_date(user_id, date_iso):
    db.collection("users").document(str(user_id)).set({"last_fact": date_iso}, merge=True)

def send_fact_of_the_day_now():
    item = _random_fact()
    today = datetime.now(tz).date().isoformat()
    msg = build_fact_message(item)
    
    # –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, —É –∫–æ–≥–æ –≤–∫–ª—é—á–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ sub_fact
    try:
        recipients = [int(doc.id) for doc in db.collection("users").where("sub_fact", "==", True).stream()]
    except Exception as e:
        print(f"[fact] recipients err: {e}")
        recipients = []
    
    for user_id in recipients:
        if _get_last_fact_date(user_id) == today:
            continue
        try:
            bot.send_message(user_id, msg, parse_mode="Markdown")
            _set_last_fact_date(user_id, today)
        except Exception as e:
            print(f"[fact] send failed for {user_id}: {e}")

def _schedule_next_20():
    now = datetime.now(tz)
    next20 = now.replace(hour=20, minute=0, second=0, microsecond=0)
    if now >= next20:
        next20 += timedelta(days=1)
    delay = (next20 - now).total_seconds()
    
    def _run():
        try:
            send_fact_of_the_day_now()
        finally:
            _schedule_next_20()
    
    threading.Timer(delay, _run).start()

_schedule_next_20()

# ===== –í–ò–ö–¢–û–†–ò–ù–ê =====
QUIZ_COLL = "quiz"
QUIZ_DOC = "current"
QUIZ_STATS_DOC = "stats"

def _u(user_id):
    return db.collection("users").document(str(user_id))

def _quiz_state_ref(user_id):
    return _u(user_id).collection(QUIZ_COLL).document(QUIZ_DOC)

def _quiz_stats_ref(user_id):
    return _u(user_id).collection(QUIZ_COLL).document(QUIZ_STATS_DOC)

def _mk_options(correct_ru, all_ru, k=3):
    pool = [x for x in all_ru if x and x != correct_ru]
    random.shuffle(pool)
    distractors, seen = [], set()
    
    for v in pool:
        if v not in seen:
            seen.add(v)
            distractors.append(v)
        if len(distractors) >= k:
            break
    
    opts = [correct_ru] + distractors
    random.shuffle(opts)
    answer_idx = opts.index(correct_ru)
    return opts, answer_idx

def _choose_question():
    if not isinstance(phrase_db, list) or len(phrase_db) < 4:
        raise RuntimeError("–î–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 4 —Ñ—Ä–∞–∑—ã –≤ phrase_db.")
    
    item = random.choice(phrase_db)
    he, ru, note = item.get("he"), item.get("ru"), (item.get("note") or "")
    
    if not he or not ru:
        return _choose_question()
    
    all_ru = [x.get("ru") for x in phrase_db if x.get("ru")]
    options, answer_idx = _mk_options(ru, all_ru, k=3)
    
    return {
        "he": he,
        "ru": ru,
        "note": note,
        "options": options,
        "answer": answer_idx,
        "ts": datetime.utcnow().isoformat(),
        "done": False
    }

def _render_quiz_message(state):
    he = state["he"]
    opts = state["options"]
    lines = ["üß† *–í–∏–∫—Ç–æ—Ä–∏–Ω–∞*", "–í—ã–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥ —Ñ—Ä–∞–∑—ã –Ω–∞ –∏–≤—Ä–∏—Ç–µ:", f"üó£ {he}", "", "–í–∞—Ä–∏–∞–Ω—Ç—ã:"]
    
    for i, opt in enumerate(opts, start=1):
        lines.append(f"{i}. {opt}")
    
    return "\n".join(lines)

def _quiz_keyboard(state):
    kb = InlineKeyboardMarkup()
    for i in range(len(state["options"])):
        kb.add(InlineKeyboardButton(f"–í—ã–±—Ä–∞—Ç—å {i+1}", callback_data=f"qz:pick:{i}"))
    kb.add(InlineKeyboardButton("–°—Ç–æ–ø", callback_data="qz:stop"))
    return kb

def _again_keyboard():
    kb = InlineKeyboardMarkup()
    kb.row(InlineKeyboardButton("–ï—â—ë", callback_data="qz:again"), InlineKeyboardButton("–°—Ç–æ–ø", callback_data="qz:stop"))
    return kb

def _inc_stats(user_id, correct: bool):
    ref = _quiz_stats_ref(user_id)
    snap = ref.get()
    d = snap.to_dict() if snap.exists else {"total": 0, "correct": 0}
    d["total"] = int(d.get("total", 0)) + 1
    if correct:
        d["correct"] = int(d.get("correct", 0)) + 1
    ref.set(d, merge=True)
    return d

def _reset_current(user_id):
    _quiz_state_ref(user_id).delete()

# ===== –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenAI =====
def ask_gpt(messages, model="gpt-4o", max_retries=3):
    """–ó–∞–ø—Ä–æ—Å –∫ OpenAI —Å —Ä–µ—Ç—Ä–∞—è–º–∏ –∏ —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –ø–∞—É–∑–æ–π."""
    delay = 1.0
    for attempt in range(1, max_retries + 1):
        try:
            resp = client.chat.completions.create(
                model=model,
                messages=messages,
                temperature=0.4,
                timeout=30,
                max_tokens=300
            )
            return resp.choices[0].message.content.strip()
        except (APIConnectionError, RateLimitError, APIStatusError) as e:
            print(f"[ask_gpt] API error (–ø–æ–ø—ã—Ç–∫–∞ {attempt}/{max_retries}): {e}")
            if attempt == max_retries:
                return None
        except (AuthenticationError, BadRequestError) as e:
            print(f"[ask_gpt] Auth/BadRequest error: {e}")
            raise
        except Exception as e:
            print(f"[ask_gpt] Unexpected error (–ø–æ–ø—ã—Ç–∫–∞ {attempt}/{max_retries}): {e}")
            if attempt == max_retries:
                return None
        
        if attempt < max_retries:
            sleep_time = delay + random.uniform(0, 0.5)
            print(f"[ask_gpt] –ñ–¥—ë–º {sleep_time:.1f} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...")
            time.sleep(sleep_time)
            delay *= 2
    
    return None

# ===== –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–µ–∫–∞–º–∏ =====
def _forward_receipt_to_owner(chat_id: int, from_user, text_summary: str, photo_message=None):
    uid = from_user.id
    uname = from_user.username or "‚Äî"
    header = f"üì© –ß–µ–∫ –Ω–∞ –ø—Ä–µ–º–∏—É–º (PayBox)\nID: {uid}\nUsername: @{uname}\n{('-'*20)}\n{text_summary}"
    
    if OWNER_ID:
        try:
            if photo_message:
                # –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ
                bot.forward_message(OWNER_ID, photo_message.chat.id, photo_message.message_id)
            bot.send_message(OWNER_ID, header)
        except Exception as e:
            print(f"[receipt->owner {OWNER_ID}] err:", e)

def _accept_receipt_message(message) -> bool:
    """–ü—ã—Ç–∞–µ—Ç—Å—è –ø—Ä–∏–Ω—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ —á–µ–∫ PayBox. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –ø—Ä–∏–Ω—è—Ç–æ."""
    state = receipt_state.get(message.chat.id)
    if not state or state.get("provider") != "paybox":
        return False  # —Å–µ–π—á–∞—Å –º—ã –Ω–µ –∂–¥—ë–º —á–µ–∫ –æ—Ç —ç—Ç–æ–≥–æ —á–∞—Ç–∞
    
    # TEXT-–≤–∞—Ä–∏–∞–Ω—Ç: —Å—Å—ã–ª–∫–∞/—Ç–µ–∫—Å—Ç —Å —Å—É–º–º–æ–π
    if message.content_type == 'text':
        txt = (message.text or "").strip()
        has_link = bool(PAYBOX_URL_RE.search(txt))
        amount = AMOUNT_RE.search(txt)
        
        if has_link or amount:
            parts = []
            if has_link:
                parts.append(f"–°—Å—ã–ª–∫–∞: {PAYBOX_URL_RE.search(txt).group(0)}")
            if amount:
                parts.append(f"–°—É–º–º–∞: {amount.group(1)} {amount.group(2)}")
            summary = "\n".join(parts) or txt[:200]
            
            _forward_receipt_to_owner(message.chat.id, message.from_user, summary)
            bot.send_message(message.chat.id, "‚úÖ –°–ø–∞—Å–∏–±–æ! –ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤ —Ç–µ—á–µ–Ω–∏–µ —Å—É—Ç–æ–∫.")
            receipt_state.pop(message.chat.id, None)
            return True
        else:
            bot.send_message(message.chat.id, "‚ùå –ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —á–µ–∫ PayBox. –ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É PayBox –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å –ø–æ–¥–ø–∏—Å—å—é (—Å—É–º–º–∞ + –¥–∞—Ç–∞).")
            return True  # –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ (–Ω–æ –Ω–µ –ø—Ä–∏–Ω—è—Ç–æ)
    
    # PHOTO-–≤–∞—Ä–∏–∞–Ω—Ç: —Å–∫—Ä–∏–Ω —Å –ø–æ–¥–ø–∏—Å—å—é
    if message.content_type == 'photo':
        caption = (message.caption or "").strip()
        amount = AMOUNT_RE.search(caption)
        
        if not amount:
            bot.send_message(message.chat.id, "‚ÑπÔ∏è –î–æ–±–∞–≤—å—Ç–µ –ø–æ–¥–ø–∏—Å—å –∫ —Å–∫—Ä–∏–Ω—É: *—Å—É–º–º–∞* –∏ *–¥–∞—Ç–∞/–≤—Ä–µ–º—è*. –ü—Ä–∏–º–µ—Ä: 15‚Ç™, 02.09 10:35", parse_mode="Markdown")
            return True  # –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
        
        summary = f"–°–∫—Ä–∏–Ω—à–æ—Ç PayBox\n–°—É–º–º–∞: {amount.group(1)} {amount.group(2)}\n–ü–æ–¥–ø–∏—Å—å: {caption[:120]}"
        _forward_receipt_to_owner(message.chat.id, message.from_user, summary, photo_message=message)
        bot.send_message(message.chat.id, "‚úÖ –°–ø–∞—Å–∏–±–æ! –ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤ —Ç–µ—á–µ–Ω–∏–µ —Å—É—Ç–æ–∫.")
        receipt_state.pop(message.chat.id, None)
        return True
    
    # –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã ‚Äî –æ—Ç–∫–ª–æ–Ω—è–µ–º
    bot.send_message(message.chat.id, "–Ø –º–æ–≥—É –ø—Ä–∏–Ω—è—Ç—å *—Å—Å—ã–ª–∫—É PayBox* –∏–ª–∏ *—Å–∫—Ä–∏–Ω—à–æ—Ç* (—Å –ø–æ–¥–ø–∏—Å—å—é: —Å—É–º–º–∞ + –¥–∞—Ç–∞).", parse_mode="Markdown")
    return True

# ===== –ü–æ–¥–ø–∏—Å–∫–∏: UI =====
def _subs_kb(sub_pod: bool, sub_fact: bool):
    kb = InlineKeyboardMarkup()
    if sub_pod:
        kb.add(InlineKeyboardButton("‚òÄÔ∏è –§—Ä–∞–∑–∞ –¥–Ω—è: –≤—ã–∫–ª—é—á–∏—Ç—å", callback_data="subs:pod:off"))
    else:
        kb.add(InlineKeyboardButton("‚òÄÔ∏è –§—Ä–∞–∑–∞ –¥–Ω—è: –≤–∫–ª—é—á–∏—Ç—å", callback_data="subs:pod:on"))
    
    if sub_fact:
        kb.add(InlineKeyboardButton("üìú –§–∞–∫—Ç –¥–Ω—è: –≤—ã–∫–ª—é—á–∏—Ç—å", callback_data="subs:fact:off"))
    else:
        kb.add(InlineKeyboardButton("üìú –§–∞–∫—Ç –¥–Ω—è: –≤–∫–ª—é—á–∏—Ç—å", callback_data="subs:fact:on"))
    
    return kb

# ===== –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ =====
def _fmt_bar(used: int, total: int, size: int = 10) -> str:
    if total <= 0:
        return "‚Äî"
    filled = int(round(size * min(used, total) / total))
    return "‚ñà" * filled + "‚ñë" * (size - filled)

# ===== –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê =====

@bot.message_handler(commands=['version'])
def cmd_version(m):
    bot.send_message(m.chat.id, f"–í–µ—Ä—Å–∏—è –∫–æ–¥–∞: {VERSION}")

@bot.message_handler(commands=['access'])
def cmd_access(m):
    ok = check_access(m.from_user.id)
    bot.send_message(m.chat.id, f"ACCESS={ok} user_id={m.from_user.id}\nVERSION={VERSION}")

@bot.message_handler(commands=['id'])
def send_user_id(message):
    bot.send_message(message.chat.id, f"üë§ –¢–≤–æ–π Telegram ID: {message.from_user.id}", parse_mode='Markdown')

@bot.message_handler(commands=['start'])
def cmd_start(m):
    _ensure_user(m.from_user)
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(KeyboardButton("/quiz"), KeyboardButton("/quizstats"))
    kb.row(KeyboardButton("/id"), KeyboardButton("/profile"))
    bot.send_message(
        m.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–µ—Ä–µ–≤–æ–∂—É –∏ –æ–±—ä—è—Å–Ω—è—é –∏–≤—Ä–∏—Ç.\n"
        "‚Ä¢ –ü—Ä–∏—à–ª–∏ —Ñ—Ä–∞–∑—É –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –¥–∞–º –ø–µ—Ä–µ–≤–æ–¥\n"
        "‚Ä¢ –ü–æ–¥ –ø–µ—Ä–µ–≤–æ–¥–æ–º –±—É–¥—É—Ç –∫–Ω–æ–ø–∫–∏ ¬´üß† –û–±—ä—è—Å–Ω–∏—Ç—å¬ª –∏ ¬´üîÅ –ï—â—ë –ø–µ—Ä–µ–≤–æ–¥¬ª\n"
        "‚Ä¢ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Ç–æ–∂–µ –º–æ–∂–Ω–æ ‚Äî –ø—Ä–∏—à–ª–∏ –∞—É–¥–∏–æ\n"
        "‚Ä¢ –ú–∏–Ω–∏-–∏–≥—Ä–∞: /quiz\n"
        "‚Ä¢ –õ–∏–º–∏—Ç—ã —Å–º–æ—Ç—Ä–∏: /profile\n"
        "¬© 2025 Botargem. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã",
        reply_markup=kb
    )

HELP_TEXT = (
    "üëã –ü—Ä–∏–≤–µ—Ç! –í–æ—Ç —á—Ç–æ —É–º–µ–µ—Ç Botargem:\n\n"
    "üìù *–ü–µ—Ä–µ–≤–æ–¥*\n"
    "‚Ä¢ –ü—Ä–∏—à–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∏–≤—Ä–∏—Ç–µ ‚Äî –ø–æ–ª—É—á–∏—à—å –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π\n"
    "‚Ä¢ –ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å —á—É–∂–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –∞—É–¥–∏–æ\n\n"
    "üß† *–û–±—ä—è—Å–Ω–µ–Ω–∏—è*\n"
    "‚Ä¢ –ü–æ–¥ –ø–µ—Ä–µ–≤–æ–¥–æ–º –∫–Ω–æ–ø–∫–∞ ¬´–û–±—ä—è—Å–Ω–∏—Ç—å¬ª ‚Äî –≥—Ä–∞–º–º–∞—Ç–∏–∫–∞, —Å–ª–µ–Ω–≥, –ø—Ä–∏–º–µ—Ä—ã\n\n"
    "üéÆ *–ò–≥—Ä—ã*\n"
    "‚Ä¢ –ú–∏–Ω–∏-–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞: /quiz\n"
    "‚Ä¢ –¢–≤–æ–π —Å—á—ë—Ç: /quizstats\n\n"
    "‚òÄÔ∏è –ö–∞–∂–¥—ã–π –¥–µ–Ω—å —É—Ç—Ä–æ–º ‚Äî ¬´–§—Ä–∞–∑–∞ –¥–Ω—è¬ª\n"
    "üìú –ö–∞–∂–¥—ã–π –≤–µ—á–µ—Ä ‚Äî ¬´–§–∞–∫—Ç –¥–Ω—è¬ª\n\n"
    "‚öñÔ∏è *–õ–∏–º–∏—Ç—ã (–±–µ–∑ –ø—Ä–µ–º–∏—É–º)*\n"
    "‚Ä¢ 3 —Ç–µ–∫—Å—Ç–∞ –≤ –¥–µ–Ω—å\n"
    "‚Ä¢ 3 –∞—É–¥–∏–æ –≤ –¥–µ–Ω—å\n"
    "‚Ä¢ 1500 —Å–∏–º–≤–æ–ª–æ–≤ —Ç–µ–∫—Å—Ç–∞\n"
    "‚Ä¢ 180 —Å–µ–∫—É–Ω–¥ –∞—É–¥–∏–æ\n"
    "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Å—Ç–∞—Ç–æ–∫: /profile\n\n"
    "üíé *Premium*\n"
    "‚Ä¢ –° –ø—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å–æ–º –ª–∏–º–∏—Ç—ã –Ω–µ –¥–µ–π—Å—Ç–≤—É—é—Ç\n\n"
    "üíù *–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞*\n"
    "‚Ä¢ –î–æ–Ω–∞—Ç—ã: /donate (Bit QR –∏–ª–∏ PayBox)\n"
)

@bot.message_handler(commands=['help'])
def cmd_help(m):
    bot.send_message(m.chat.id, HELP_TEXT, parse_mode="Markdown")

@bot.message_handler(commands=['rules', '–ø—Ä–∞–≤–∏–ª–∞'])
def send_rules(m):
    rules_text = (
        "üìú –ü—Ä–∞–≤–∏–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–º Botargem\n\n"
        "1. –î–æ—Å—Ç—É–ø\n"
        "–í—Å–µ –º–æ–≥—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –±–µ—Å–ø–ª–∞—Ç–Ω–æ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–Ω–µ–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤.\n"
        "–ü—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –∞–¥–º–∏–Ω.\n\n"
        "2. –ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç\n"
        "üìù –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –∏ –∞—É–¥–∏–æ\n"
        "üß† –û–±—ä—è—Å–Ω–µ–Ω–∏—è –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏ –∏ —Å–ª–µ–Ω–≥–∞\n"
        "üéÆ –ò–≥—Ä—ã –∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã\n"
        "üìö –§—Ä–∞–∑–∞ –¥–Ω—è\n\n"
        "3. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è\n"
        "üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–æ ‚Äî —Å –ª–∏–º–∏—Ç–∞–º–∏\n"
        "üíé –ü—Ä–µ–º–∏—É–º ‚Äî –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π\n\n"
        "4. –ß—Ç–æ –∑–∞–ø—Ä–µ—â–µ–Ω–æ\n"
        "‚ùå –°–ø–∞–º\n"
        "‚ùå –û—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è/–Ω–µ–∑–∞–∫–æ–Ω–Ω–æ–µ\n"
        "‚ùå –ü–µ—Ä–µ–¥–∞–≤–∞—Ç—å –ø—Ä–µ–º–∏—É–º –¥—Ä—É–≥–∏–º\n\n"
        "5. –í–∞–∂–Ω–æ –∑–Ω–∞—Ç—å\n"
        "‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω—ã –æ—à–∏–±–∫–∏ –≤ –ø–µ—Ä–µ–≤–æ–¥–µ\n"
        "‚ö†Ô∏è –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n\n"
        "6. –ü–æ–¥–¥–µ—Ä–∂–∫–∞\n"
        "–í–æ–ø—Ä–æ—Å—ã: t.me/BotargemBot"
    )
    bot.send_message(m.chat.id, rules_text, parse_mode="Markdown")

@bot.message_handler(commands=['copyrights'])
def send_copyrights(m):
    text = (
        "üîí –ê–≤—Ç–æ—Ä—Å–∫–∏–µ –ø—Ä–∞–≤–∞ \n"
        "¬© 2025 Botargem. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.\n"
        "¬© 2025 ‚ÄèBotargem. ◊õ◊ú ◊î◊ñ◊õ◊ï◊ô◊ï◊™ ◊©◊û◊ï◊®◊ï◊™.\n\n"
        "RU:\n"
        "‚Ä¢ –î–∏–∑–∞–π–Ω, —Ç–µ–∫—Å—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞, –±–∞–∑–∞ —Ñ—Ä–∞–∑ –∏ –ª–æ–≥–æ—Ç–∏–ø ü¶â ‚Äî —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∞–≤—Ç–æ—Ä–∞.\n"
        "‚Ä¢ –ù–µ–ª—å–∑—è –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –±–µ–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è.\n"
        "‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥—ã –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏—á–Ω–æ, –Ω–æ –Ω–µ–ª—å–∑—è –ø—Ä–æ–¥–∞–≤–∞—Ç—å –∫–∞–∫ —Å–≤–æ–π —Å–µ—Ä–≤–∏—Å.\n"
        "‚Ä¢ –í–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è/–∞—É–¥–∏–æ –æ—Å—Ç–∞—é—Ç—Å—è –≤–∞—à–∏–º–∏; –æ—Ç–ø—Ä–∞–≤–ª—è—è –∏—Ö, –≤—ã —Ä–∞–∑—Ä–µ—à–∞–µ—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞/–æ–±—ä—è—Å–Ω–µ–Ω–∏–π.\n"
        "‚Ä¢ –ú–µ–¥–∏–∞ –≤ –ø—Ä–æ–º–æ ‚Äî —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º –∏–ª–∏ –ø–æ –æ—Ç–∫—Ä—ã—Ç–æ–π –ª–∏—Ü–µ–Ω–∑–∏–∏.\n"
        "HE:\n"
        "‚Ä¢ ◊î◊¢◊ô◊¶◊ï◊ë, ◊î◊ò◊ß◊°◊ò◊ô◊ù, ◊û◊ê◊í◊® ◊î◊ë◊ô◊ò◊ï◊ô◊ô◊ù ◊ï◊î◊ú◊ï◊í◊ï ü¶â ◊î◊ù ◊ß◊†◊ô◊ô◊ü ◊©◊ú ◊î◊ô◊ï◊¶◊®.\n"
        "‚Ä¢ ◊ê◊ô◊ü ◊ú◊î◊¢◊™◊ô◊ß ◊ê◊ï ◊ú◊§◊®◊°◊ù ◊ú◊ú◊ê ◊ê◊ô◊©◊ï◊®.\n"
        "‚Ä¢ ◊û◊ï◊™◊® ◊©◊ô◊û◊ï◊© ◊ê◊ô◊©◊ô ◊ë◊™◊®◊í◊ï◊û◊ô◊ù, ◊ê◊°◊ï◊® ◊ú◊û◊õ◊ï◊® ◊õ◊©◊ô◊®◊ï◊™ ◊û◊©◊ú◊õ◊ù.\n"
        "‚Ä¢ ◊î◊™◊ï◊õ◊ü ◊©◊ê◊™◊ù ◊©◊ï◊ú◊ó◊ô◊ù (◊ò◊ß◊°◊ò/◊ê◊ï◊ì◊ô◊ï) ◊†◊©◊ê◊® ◊©◊ú◊õ◊ù; ◊ë◊©◊ú◊ô◊ó◊™◊ï ◊ê◊™◊ù ◊û◊ê◊©◊®◊ô◊ù ◊©◊ô◊û◊ï◊© ◊ú◊¶◊ï◊®◊ö ◊™◊®◊í◊ï◊ù/◊î◊°◊ë◊®.\n"
        "‚Ä¢ ◊û◊ì◊ô◊î ◊ë◊§◊®◊ï◊û◊ï ‚Äî ◊ë◊®◊ô◊©◊ô◊ï◊ü ◊û◊™◊ê◊ô◊ù ◊ê◊ï ◊ó◊ï◊§◊©◊ô.\n"
    )
    bot.send_message(m.chat.id, text)

@bot.message_handler(commands=['profile'])
def cmd_profile(m):
    if not check_access(m.from_user.id):
        return bot.send_message(m.chat.id, "–ò–∑–≤–∏–Ω–∏, –¥–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω üëÆ‚Äç‚ôÄÔ∏è")
    
    data = get_usage(m.from_user.id)
    t_used = int(data.get("text", 0))
    a_used = int(data.get("audio", 0))
    tc_used = int(data.get("text_chars", 0))
    as_used = int(data.get("audio_secs", 0))
    
    t_total, a_total = FREE_LIMIT_TEXT, FREE_LIMIT_AUDIO
    tc_total, as_total = TEXT_MAX_LEN_PER_DAY, AUDIO_MAX_SEC_PER_DAY
    
    bar_t = _fmt_bar(t_used, t_total)
    bar_a = _fmt_bar(a_used, a_total)
    bar_tc = _fmt_bar(tc_used, tc_total)
    bar_as = _fmt_bar(as_used, as_total)
    
    now = datetime.now(tz)
    midnight = now.replace(hour=23, minute=59, second=59, microsecond=0)
    left = max(0, int((midnight - now).total_seconds()))
    hh, mm = left//3600, (left%3600)//60
    
    msg = (
        "üë§ *–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å / –ª–∏–º–∏—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è*\n\n"
        f"üìù –¢–µ–∫—Å—Ç—ã: {t_used}/{t_total} {bar_t}\n"
        f"üîä –ê—É–¥–∏–æ: {a_used}/{a_total} {bar_a}\n"
        f"üî° –°–∏–º–≤–æ–ª—ã: {tc_used}/{tc_total} {bar_tc}\n"
        f"‚è± –°–µ–∫—É–Ω–¥—ã: {as_used}/{as_total} {bar_as}\n\n"
        f"üîÑ –°–±—Ä–æ—Å ~—á–µ—Ä–µ–∑ {hh}—á {mm}–º (Asia/Jerusalem)"
    )
    bot.send_message(m.chat.id, msg, parse_mode="Markdown")

@bot.message_handler(commands=['menu'])
def cmd_menu(m):
    kb = InlineKeyboardMarkup()
    kb.row(
        InlineKeyboardButton("üìò –ü–µ—Ä–µ–≤–æ–¥—ã", callback_data="menu:tr"),
        InlineKeyboardButton("üéÆ –ò–≥—Ä—ã", callback_data="menu:games"),
    )
    kb.row(
        InlineKeyboardButton("‚òÄÔ∏è –§—Ä–∞–∑–∞ –¥–Ω—è", callback_data="menu:pod"),
        InlineKeyboardButton("üìú –§–∞–∫—Ç –¥–Ω—è", callback_data="menu:fact"),
    )
    kb.row(
        InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="menu:profile"),
        InlineKeyboardButton("üíé Premium", callback_data="menu:premium"),
    )
    bot.send_message(m.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª üëá", reply_markup=kb)

@bot.callback_query_handler(func=lambda c: c.data.startswith("menu:"))
def cb_menu(c):
    kind = c.data.split(":",1)[1]
    if kind == "tr":
        try:
            bot.edit_message_text(
                "üìò *–ü–µ—Ä–µ–≤–æ–¥—ã*\n"
                "‚Ä¢ –ü—Ä–∏—à–ª–∏—Ç–µ *—Ç–µ–∫—Å—Ç –∏–ª–∏ –∞—É–¥–∏–æ –Ω–∞ –∏–≤—Ä–∏—Ç–µ* ‚Äî —è –ø–µ—Ä–µ–≤–µ–¥—É –Ω–∞ —Ä—É—Å—Å–∫–∏–π.\n"
                "‚Ä¢ –ü–æ–¥ –ø–µ—Ä–µ–≤–æ–¥–æ–º –±—É–¥—É—Ç –∫–Ω–æ–ø–∫–∏: ¬´üß† –û–±—ä—è—Å–Ω–∏—Ç—å¬ª, ¬´üîÅ –ù–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥¬ª.",
                c.message.chat.id, c.message.message_id, parse_mode="Markdown"
            )
        except Exception:
            bot.send_message(c.message.chat.id,
                "üìò *–ü–µ—Ä–µ–≤–æ–¥—ã*\n"
                "‚Ä¢ –ü—Ä–∏—à–ª–∏—Ç–µ *—Ç–µ–∫—Å—Ç –∏–ª–∏ –∞—É–¥–∏–æ –Ω–∞ –∏–≤—Ä–∏—Ç–µ* ‚Äî —è –ø–µ—Ä–µ–≤–µ–¥—É –Ω–∞ —Ä—É—Å—Å–∫–∏–π.\n"
                "‚Ä¢ –ü–æ–¥ –ø–µ—Ä–µ–≤–æ–¥–æ–º –±—É–¥—É—Ç –∫–Ω–æ–ø–∫–∏: ¬´üß† –û–±—ä—è—Å–Ω–∏—Ç—å¬ª, ¬´üîÅ –ù–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥¬ª.",
                parse_mode="Markdown"
            )
    elif kind == "games":
        try:
            bot.edit_message_text(
                "üéÆ *–ò–≥—Ä—ã*\n"
                "‚Ä¢ /quiz ‚Äî –º–∏–Ω–∏-–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞\n"
                "‚Ä¢ /quizstats ‚Äî –º–æ–π —Å—á—ë—Ç",
                c.message.chat.id, c.message.message_id, parse_mode="Markdown"
            )
        except Exception:
            bot.send_message(c.message.chat.id,
                "üéÆ *–ò–≥—Ä—ã*\n"
                "‚Ä¢ /quiz ‚Äî –º–∏–Ω–∏-–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞\n"
                "‚Ä¢ /quizstats ‚Äî –º–æ–π —Å—á—ë—Ç",
                parse_mode="Markdown"
            )
    elif kind == "pod":
        bot.answer_callback_query(c.id)
        bot.send_message(c.message.chat.id, "‚òÄÔ∏è –§—Ä–∞–∑–∞ –¥–Ω—è –ø—Ä–∏—Ö–æ–¥–∏—Ç *–≤ 08:00*. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π: /subs", parse_mode="Markdown")
    elif kind == "fact":
        bot.answer_callback_query(c.id)
        bot.send_message(c.message.chat.id, "üìú –§–∞–∫—Ç –¥–Ω—è –ø—Ä–∏—Ö–æ–¥–∏—Ç *–≤ 20:00*. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π: /subs", parse_mode="Markdown")
    elif kind == "profile":
        # –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–≤–æ—é —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ—Ñ–∏–ª—è:
        cmd_profile(type("obj",(object,),{"chat":c.message.chat, "from_user":c.from_user}))
    elif kind == "premium":
        cmd_premium(type("obj",(object,),{"chat":c.message.chat, "from_user":c.from_user}))
    bot.answer_callback_query(c.id)


@bot.message_handler(commands=['quiz'])
def cmd_quiz(m):
    if not check_access(m.from_user.id):
        return bot.send_message(m.chat.id, "–ò–∑–≤–∏–Ω–∏, –¥–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω üëÆ‚Äç‚ôÄÔ∏è")
    
    try:
        state = _choose_question()
    except Exception as e:
        return bot.send_message(m.chat.id, f"–ù–µ –º–æ–≥—É –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É: {e}")
    
    _quiz_state_ref(m.from_user.id).set(state, merge=True)
    bot.send_message(
        m.chat.id,
        _render_quiz_message(state),
        parse_mode="Markdown",
        reply_markup=_quiz_keyboard(state)
    )

@bot.message_handler(commands=['quizstats'])
def quiz_stats(m):
    if not check_access(m.from_user.id):
        return bot.send_message(m.chat.id, "–ò–∑–≤–∏–Ω–∏, –¥–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω üëÆ‚Äç‚ôÄÔ∏è")
    
    snap = _quiz_stats_ref(m.from_user.id).get()
    d = snap.to_dict() if snap.exists else {"total": 0, "correct": 0}
    bot.send_message(m.chat.id, f"–¢–≤–æ–π —Å—á—ë—Ç: {d.get('correct',0)}/{d.get('total',0)}")

@bot.message_handler(commands=['quizreset'])
def quiz_reset(m):
    if not check_access(m.from_user.id):
        return bot.send_message(m.chat.id, "–ò–∑–≤–∏–Ω–∏, –¥–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω üëÆ‚Äç‚ôÄÔ∏è")
    
    _quiz_stats_ref(m.from_user.id).delete()
    bot.send_message(m.chat.id, "–°—á—ë—Ç —Å–±—Ä–æ—à–µ–Ω.")

@bot.message_handler(commands=['pod'])
def cmd_pod(m):
    if not is_owner(m.from_user.id):
        return bot.send_message(m.chat.id, "‚õî –ù–µ—Ç –ø—Ä–∞–≤")
    
    send_phrase_of_the_day_now()
    bot.send_message(m.chat.id, "–§—Ä–∞–∑—É –¥–Ω—è —Ä–∞–∑–æ—Å–ª–∞–ª–∞ –≤—Å–µ–º (–∫—Ç–æ –µ—â—ë –Ω–µ –ø–æ–ª—É—á–∞–ª —Å–µ–≥–æ–¥–Ω—è).")

@bot.message_handler(commands=['fact'])
def cmd_fact(m):
    if not is_owner(m.from_user.id):
        return bot.send_message(m.chat.id, "‚õî –ù–µ—Ç –ø—Ä–∞–≤")
    
    send_fact_of_the_day_now()
    bot.send_message(m.chat.id, "–§–∞–∫—Ç –¥–Ω—è —Ä–∞–∑–æ—Å–ª–∞–ª–∞ –≤—Å–µ–º (–∫—Ç–æ –µ—â—ë –Ω–µ –ø–æ–ª—É—á–∞–ª —Å–µ–≥–æ–¥–Ω—è).")

@bot.message_handler(commands=['donate'])
def cmd_donate(m):
    if not check_access(m.from_user.id):
        return bot.send_message(m.chat.id, "–ò–∑–≤–∏–Ω–∏, –¥–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω üëÆ‚Äç‚ôÄÔ∏è")
    
    # Bit: —à–ª—ë–º QR —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π
    try:
        with open(BIT_QR_IMAGE, "rb") as photo:
            bot.send_photo(
                m.chat.id,
                photo,
                caption=(
                    "‚òï –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å —á–µ—Ä–µ–∑ *Bit* ‚Äî –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π QR.\n"
                    "–≠—Ç–æ –¥–æ–±—Ä–æ–≤–æ–ª—å–Ω—ã–π –¥–æ–Ω–∞—Ç –∏ *–Ω–µ –≤–ª–∏—è–µ—Ç* –Ω–∞ –ª–∏–º–∏—Ç—ã.\n"
                    "–î–ª—è –±–µ–∑–ª–∏–º–∏—Ç–∞ –µ—Å—Ç—å /premium."
                ),
                parse_mode="Markdown"
            )
    except Exception:
        pass
    
    # PayBox: –∫–Ω–æ–ø–∫–∞
    kb = InlineKeyboardMarkup()
    for title, url in DONATE_LINKS:
        kb.add(InlineKeyboardButton(text=title, url=url))
    bot.send_message(m.chat.id, "–ò–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —á–µ—Ä–µ–∑ PayBox üëá", reply_markup=kb)

@bot.message_handler(commands=['history'])
def cmd_history(m):
    if not check_access(m.from_user.id):
        return bot.send_message(m.chat.id, "–ò–∑–≤–∏–Ω–∏, –¥–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω üëÆ‚Äç‚ôÄÔ∏è")
    
    try:
        docs = list(_history_ref(m.from_user.id).order_by("ts", direction=firestore.Query.DESCENDING).limit(5).stream())
        if not docs:
            return bot.send_message(m.chat.id, "–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
        
        lines = ["üóÇ *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã:*"]
        for d in docs:
            x = d.to_dict()
            ts = x.get("ts", "")[:19].replace("T", " ")
            src = (x.get("source", "")[:120] or "").replace("\n", " ")
            res = (x.get("result", "")[:120] or "").replace("\n", " ")
            lines.append(f"‚Ä¢ [{ts}] {src} ‚Üí {res}")
        
        bot.send_message(m.chat.id, "\n".join(lines), parse_mode="Markdown")
    except Exception as e:
        bot.send_message(m.chat.id, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é: {e}")

@bot.message_handler(commands=['stats'])
def cmd_stats(m):
    # –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    if int(m.from_user.id) not in ALLOWED_ADMINS:
        return bot.send_message(m.chat.id, "‚õî –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    
    try:
        users_ref = db.collection("users")
        # –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—á–∏—Å–ª–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ users)
        total = sum(1 for _ in users_ref.stream())
        
        # –ê–∫—Ç–∏–≤–Ω—ã —Å–µ–≥–æ–¥–Ω—è (—Å 00:00 –ø–æ Asia/Jerusalem)
        now_il = datetime.now(tz)
        start_il = now_il.replace(hour=0, minute=0, second=0, microsecond=0)
        start_utc_iso = start_il.astimezone(timezone.utc).isoformat()
        today = sum(1 for _ in users_ref.where("last_seen", ">=", start_utc_iso).stream())
        
        # –ê–∫—Ç–∏–≤–Ω—ã –∑–∞ 7 –¥–Ω–µ–π
        cutoff_utc_iso = (datetime.now(timezone.utc) - timedelta(days=7)).isoformat()
        week = sum(1 for _ in users_ref.where("last_seen", ">=", cutoff_utc_iso).stream())
        
        text = (
            "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: *{total}*\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã —Å–µ–≥–æ–¥–Ω—è: *{today}*\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã –∑–∞ 7 –¥–Ω–µ–π: *{week}*"
        )
        bot.send_message(m.chat.id, text, parse_mode="Markdown")
    except Exception as e:
        bot.send_message(m.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

@bot.message_handler(commands=['premium'])
def cmd_premium(m):
    if not check_access(m.from_user.id):
        return bot.send_message(m.chat.id, "–ò–∑–≤–∏–Ω–∏, –¥–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω üëÆ‚Äç‚ôÄÔ∏è")
    
    pro = is_premium(m.from_user.id)
    status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if pro else "‚ùå –ù–µ –∞–∫—Ç–∏–≤–µ–Ω"
    msg = (
        f"‚≠ê *Botargem Premium*\n–°—Ç–∞—Ç—É—Å: {status}\n\n"
        "–¶–µ–Ω–∞: 15‚Ç™/–º–µ—Å (PayBox).\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫¬ª –∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É PayBox *–∏–ª–∏* —Å–∫—Ä–∏–Ω—à–æ—Ç *—Å –ø–æ–¥–ø–∏—Å—å—é* (—Å—É–º–º–∞ + –¥–∞—Ç–∞/–≤—Ä–µ–º—è)."
    )
    
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å –≤ PayBox", "https://links.payboxapp.com/FqQZPo2wfWb"))
    kb.add(InlineKeyboardButton("üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫ PayBox", callback_data="rcpt:paybox"))
    bot.send_message(m.chat.id, msg, parse_mode="Markdown", reply_markup=kb)

@bot.message_handler(commands=['setpremium'])
def cmd_setpremium(m):
    if not is_owner(m.from_user.id):
        return bot.send_message(m.chat.id, "‚õî –ù–µ—Ç –ø—Ä–∞–≤")
    
    try:
        _, uid, until = m.text.split(maxsplit=2)
        uid = int(uid)
        db.collection("premium_users").document(str(uid)).set({"active": True, "until": until}, merge=True)
        bot.send_message(m.chat.id, f"‚úÖ –ü—Ä–µ–º–∏—É–º –≤–∫–ª—é—á—ë–Ω –¥–ª—è {uid} –¥–æ {until}")
        try:
            bot.send_message(uid, f"‚≠ê –¢–µ–±–µ –≤–∫–ª—é—á–∏–ª–∏ Premium –¥–æ {until} üôå")
        except Exception:
            pass
    except Exception as e:
        bot.send_message(m.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}\n–§–æ—Ä–º–∞—Ç: /setpremium <user_id> <YYYY-MM-DD>")

@bot.message_handler(commands=['subs', 'subscribe', '–ø–æ–¥–ø–∏—Å–∫–∞'])
def cmd_subs(m):
    _ensure_user(m.from_user)
    doc = db.collection("users").document(str(m.from_user.id)).get()
    d = doc.to_dict() or {}
    sub_pod = bool(d.get("sub_pod", True))
    sub_fact = bool(d.get("sub_fact", True))
    
    text = (
        "üîî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏\n"
        f"‚Ä¢ ‚òÄÔ∏è –§—Ä–∞–∑–∞ –¥–Ω—è: {'–≤–∫–ª—é—á–µ–Ω–∞' if sub_pod else '–≤—ã–∫–ª—é—á–µ–Ω–∞'}\n"
        f"‚Ä¢ üìú –§–∞–∫—Ç –¥–Ω—è: {'–≤–∫–ª—é—á—ë–Ω' if sub_fact else '–≤—ã–∫–ª—é—á–µ–Ω'}\n\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å."
    )
    bot.send_message(m.chat.id, text, reply_markup=_subs_kb(sub_pod, sub_fact))

@bot.message_handler(commands=['podon', 'podoff', 'facton', 'factoff'])
def cmd_subs_short(m):
    _ensure_user(m.from_user)
    cmd = m.text.lstrip('/').lower()
    field = 'sub_pod' if 'pod' in cmd else 'sub_fact'
    val = cmd.endswith('on')
    db.collection("users").document(str(m.from_user.id)).set({field: val}, merge=True)
    tit = "–§—Ä–∞–∑–∞ –¥–Ω—è" if field == 'sub_pod' else "–§–∞–∫—Ç –¥–Ω—è"
    bot.send_message(m.chat.id, f"‚úÖ {tit}: {'–≤–∫–ª—é—á–µ–Ω–æ' if val else '–≤—ã–∫–ª—é—á–µ–Ω–æ'}")

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–û–ë–©–ï–ù–ò–ô =====

@bot.message_handler(content_types=['photo'])
def handle_photo(m):
    # –ï—Å–ª–∏ –∂–¥—ë–º —á–µ–∫ ‚Äî –ø—Ä–æ–±—É–µ–º –ø—Ä–∏–Ω—è—Ç—å –∫–∞–∫ —á–µ–∫
    if receipt_state.get(m.chat.id):
        _accept_receipt_message(m)
        return
    
    # –ù–µ –∂–¥—ë–º —á–µ–∫: –º—è–≥–∫–æ –Ω–∞–ø—Ä–∞–≤–∏–º –≤ /premium
    bot.send_message(m.chat.id, "–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫, –Ω–∞–∂–º–∏—Ç–µ /premium ‚Üí ¬´üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫ PayBox¬ª –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.")

@bot.message_handler(content_types=['text'])
def handle_text(message):
    _ensure_user(message.from_user)
    
    if not check_access(message.from_user.id):
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏, –¥–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω üëÆ‚Äç‚ôÄÔ∏è")
        return
    
    if not contains_hebrew(message.text):
        return bot.send_message(
            message.chat.id,
            "üå∏ –Ø –ø–µ—Ä–µ–≤–æ–∂—É *—Ç–æ–ª—å–∫–æ —Å –∏–≤—Ä–∏—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π*.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞ –∏–≤—Ä–∏—Ç–µ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ –Ω–∞ –∏–≤—Ä–∏—Ç–µ.",
            parse_mode="Markdown"
        )
    
    if message.text.startswith('/'):
        return
    
    if message.forward_from or message.forward_from_chat:
        user_data[message.chat.id] = {'forwarded_text': message.text.strip()}
        bot.send_message(
            message.chat.id,
            "üì© –ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –•–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏?",
            reply_markup=get_yes_no_keyboard()
        )
        return
    
    if receipt_state.get(message.chat.id):
        if _accept_receipt_message(message):
            return
    
    user_id = message.from_user.id
    orig = (message.text or "").strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ—Å—Ç—å ‚Äî –æ—Ç—Å–µ–∫–∞–µ–º ¬´—Ç–æ—á–∫–∏/—ç–º–æ–¥–∑–∏/!!!¬ª
    if not any(ch.isalpha() for ch in orig):
        bot.send_message(message.chat.id, "ü§î –û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.")
        return
    
    # 1) –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
    if not can_use(user_id, "text"):
        bot.send_message(message.chat.id, limit_msg("text"), parse_mode="Markdown")
        return
    
    # 2) –ø–æ —Å–∏–º–≤–æ–ª–∞–º
    ok, why = can_use_text_volume(user_id, len(orig))
    if not ok:
        bot.send_message(message.chat.id, why)
        return
    
    try:
        user_translations[message.chat.id] = orig
        translated_text = translate_text(orig)
        user_engine[message.chat.id] = "google"
        
        bot.send_message(
            message.chat.id,
            f"üìò –ü–µ—Ä–µ–≤–æ–¥:\n*{translated_text}*",
            reply_markup=get_keyboard(),
            parse_mode='Markdown'
        )
        add_history(message.from_user.id, "text", orig, translated_text)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: {e}")
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ ü´£")

@bot.message_handler(content_types=['voice', 'audio', 'document'])
def handle_voice(message):
    _ensure_user(message.from_user)
    
    if not check_access(message.from_user.id):
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏, –¥–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω üëÆ‚Äç‚ôÄÔ∏è")
        return
    
    if message.forward_from or message.forward_from_chat:
        user_data[message.chat.id] = {'forwarded_audio': message}
        bot.send_message(
            message.chat.id,
            "üì© –ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ –∞—É–¥–∏–æ. –•–æ—Ç–∏—Ç–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∏ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏?",
            reply_markup=get_yes_no_keyboard()
        )
        return
    
    user_id = message.from_user.id
    
    # 1) –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
    if not can_use(user_id, "audio"):
        bot.send_message(message.chat.id, limit_msg("audio"), parse_mode="Markdown")
        return
    
    # –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    duration = 0
    if message.content_type == 'voice' and message.voice:
        duration = int(message.voice.duration or 0)
    elif message.content_type == 'audio' and message.audio:
        duration = int(message.audio.duration or 0)
    
    # 2) –ø–æ —Å–µ–∫—É–Ω–¥–∞–º
    ok, why = can_use_audio_volume(user_id, duration)
    if not ok:
        bot.send_message(message.chat.id, why)
        return
    
    process_audio(message)

# ===== CALLBACK HANDLERS =====

@bot.callback_query_handler(func=lambda call: call.data.startswith("qz:"))
def cb_quiz(c):
    user_id = c.from_user.id
    if not check_access(user_id):
        return bot.answer_callback_query(c.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
    
    data = c.data
    
    if data == "qz:stop":
        _reset_current(user_id)
        bot.answer_callback_query(c.id, "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        try:
            bot.edit_message_text(
                "–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è —Å /quiz üôå",
                c.message.chat.id,
                c.message.message_id
            )
        except Exception:
            pass
        return
    
    if data == "qz:again":
        try:
            state = _choose_question()
        except Exception as e:
            return bot.answer_callback_query(c.id, f"–û—à–∏–±–∫–∞: {e}")
        
        _quiz_state_ref(user_id).set(state, merge=True)
        try:
            bot.edit_message_text(
                _render_quiz_message(state),
                c.message.chat.id,
                c.message.message_id,
                parse_mode="Markdown",
                reply_markup=_quiz_keyboard(state)
            )
        except Exception:
            bot.send_message(
                c.message.chat.id,
                _render_quiz_message(state),
                parse_mode="Markdown",
                reply_markup=_quiz_keyboard(state)
            )
        bot.answer_callback_query(c.id, "–ü–æ–µ—Ö–∞–ª–∏!")
        return
    
    if data.startswith("qz:pick:"):
        try:
            chosen = int(data.split(":")[2])
        except Exception:
            return bot.answer_callback_query(c.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚Ä¶")
        
        snap = _quiz_state_ref(user_id).get()
        if not snap.exists:
            bot.answer_callback_query(c.id, "–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ñ–º–∏ ¬´–ï—â—ë¬ª.")
            try:
                bot.edit_message_text(
                    "–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å —É–∂–µ –∑–∞–∫—Ä—ã—Ç. –ñ–º–∏ ¬´–ï—â—ë¬ª.",
                    c.message.chat.id,
                    c.message.message_id,
                    reply_markup=_again_keyboard()
                )
            except Exception:
                pass
            return
        
        state = snap.to_dict()
        if state.get("done"):
            bot.answer_callback_query(c.id, "–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å —É–∂–µ –æ—Ç–≤–µ—á—ë–Ω.")
            try:
                bot.edit_message_reply_markup(
                    c.message.chat.id,
                    c.message.message_id,
                    reply_markup=_again_keyboard()
                )
            except Exception:
                pass
            return
        
        opts = state["options"]
        correct_idx = int(state["answer"])
        correct = (chosen == correct_idx)
        stats = _inc_stats(user_id, correct)
        
        state["done"] = True
        _quiz_state_ref(user_id).set({"done": True}, merge=True)
        
        mark = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!" if correct else "‚ùå –ú–∏–º–æ."
        reveal = f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_idx+1}. {opts[correct_idx]}"
        note = state.get("note") or ""
        score = f"–°—á—ë—Ç: {stats.get('correct',0)}/{stats.get('total',0)}"
        
        text = [
            "üß† *–í–∏–∫—Ç–æ—Ä–∏–Ω–∞* ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
            f"üó£ {state['he']}",
            "",
            f"–¢—ã –≤—ã–±—Ä–∞–ª: {chosen+1}. {opts[chosen]}",
            f"{mark} {reveal}"
        ]
        
        if note:
            text.append(f"üí¨ –ü–æ—è—Å–Ω–µ–Ω–∏–µ: {note}")
        
        text += ["", score, "–•–æ—á–µ—à—å –µ—â—ë?"]
        final = "\n".join(text)
        
        bot.answer_callback_query(c.id, "–ü—Ä–∏–Ω—è—Ç–æ!")
        try:
            bot.edit_message_text(
                final,
                c.message.chat.id,
                c.message.message_id,
                parse_mode="Markdown",
                reply_markup=_again_keyboard()
            )
        except Exception:
            bot.send_message(
                c.message.chat.id,
                final,
                parse_mode="Markdown",
                reply_markup=_again_keyboard()
            )

@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    if not check_access(call.from_user.id):
        return bot.answer_callback_query(call.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
    
    bot.answer_callback_query(call.id)
    
    # --- –ß–µ–∫–∏ / –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏ ---
    if call.data == "rcpt:paybox":
        receipt_state[call.message.chat.id] = {
            "provider": "paybox",
            "ts": datetime.utcnow().isoformat()
        }
        bot.send_message(
            call.message.chat.id,
            "üîé –û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, *—Å—Å—ã–ª–∫—É PayBox* –Ω–∞ –æ–ø–ª–∞—Ç—É –ò–õ–ò *—Å–∫—Ä–∏–Ω—à–æ—Ç*.\n"
            "–ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å–∫—Ä–∏–Ω ‚Äî –¥–æ–±–∞–≤—å—Ç–µ –ø–æ–¥–ø–∏—Å—å: *—Å—É–º–º–∞* –∏ *–¥–∞—Ç–∞/–≤—Ä–µ–º—è*.\n\n"
            "–ü—Ä–∏–º–µ—Ä –ø–æ–¥–ø–∏—Å–∏: 15‚Ç™, 02.09 10:35",
            parse_mode="Markdown"
        )
        return
    
    # --- –ü–æ–¥–ø–∏—Å–∫–∏: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ---
    if call.data.startswith("subs:"):
        try:
            _, kind, action = call.data.split(":")  # kind in {"pod","fact"}, action in {"on","off"}
            field = "sub_pod" if kind == "pod" else "sub_fact"
            val = (action == "on")
            uid = str(call.from_user.id)
            
            db.collection("users").document(uid).set({field: val}, merge=True)
            
            doc = db.collection("users").document(uid).get()
            d = doc.to_dict() or {}
            sub_pod = bool(d.get("sub_pod", True))
            sub_fact = bool(d.get("sub_fact", True))
            
            txt = (
                "üîî –ü–æ–¥–ø–∏—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã\n"
                f"‚Ä¢ ‚òÄÔ∏è –§—Ä–∞–∑–∞ –¥–Ω—è: {'–≤–∫–ª—é—á–µ–Ω–∞' if sub_pod else '–≤—ã–∫–ª—é—á–µ–Ω–∞'}\n"
                f"‚Ä¢ üìú –§–∞–∫—Ç –¥–Ω—è: {'–≤–∫–ª—é—á—ë–Ω' if sub_fact else '–≤—ã–∫–ª—é—á–µ–Ω'}"
            )
            
            try:
                bot.edit_message_text(
                    txt,
                    call.message.chat.id,
                    call.message.message_id,
                    reply_markup=_subs_kb(sub_pod, sub_fact)
                )
            except Exception:
                bot.send_message(
                    call.message.chat.id,
                    txt,
                    reply_markup=_subs_kb(sub_pod, sub_fact)
                )
        except Exception as e:
            bot.send_message(call.message.chat.id, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É: {e}")
        return
    
    if call.data == "explain":
        text = user_translations.get(call.message.chat.id)
        if not text:
            bot.send_message(call.message.chat.id, "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è.")
            return
        
        sys_prompt = (
            "–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω–æ–≥–æ –∏–≤—Ä–∏—Ç–∞. "
            "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ñ—Ä–∞–∑—É –Ω–∞ –∏–≤—Ä–∏—Ç–µ: –ø–µ—Ä–µ–≤–µ–¥–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –≤—ã–¥–µ–ª–∏ –∫–æ—Ä–µ–Ω—å, –±–∏–Ω—å—è–Ω, "
            "–≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ñ–æ—Ä–º—É –≥–ª–∞–≥–æ–ª–æ–≤; –æ–±—ä—è—Å–Ω–∏ —Å–ª–µ–Ω–≥/–∏–¥–∏–æ–º—ã –∏ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ; "
            "–¥–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è."
        )
        
        try:
            answer = ask_gpt(
                [{"role": "system", "content": sys_prompt}, {"role": "user", "content": text}],
                model=os.getenv("OPENAI_MODEL", "gpt-4o"),
            )
            if answer is None:
                local = explain_local(text)
                _send_explanation_guard(call.message.chat.id, local, offline=True)
            else:
                _send_explanation_guard(call.message.chat.id, answer, offline=False)
        except AuthenticationError:
            bot.send_message(call.message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –∫–ª—é—á–æ–º OpenAI. –ü—Ä–æ–≤–µ—Ä—å OPENAI_API_KEY.")
        except BadRequestError as e:
            print(f"[ask_gpt] BadRequest: {e}")
            bot.send_message(call.message.chat.id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è.")
        except Exception as e:
            print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–∏: {e}")
            local = explain_local(text)
            bot.send_message(call.message.chat.id, f"üß† –û–±—ä—è—Å–Ω–µ–Ω–∏–µ (–æ—Ñ–ª–∞–π–Ω):\n{local}")
    
    elif call.data == "new":
        chat_id = call.message.chat.id
        text = user_translations.get(chat_id)
        if not text:
            bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏—à–ª–∏ —Ñ—Ä–∞–∑—É, –∞ –ø–æ—Ç–æ–º –∂–º–∏ ¬´–ï—â—ë –ø–µ—Ä–µ–≤–æ–¥¬ª.")
            return
        
        prev = user_engine.get(chat_id, "google")
        next_engine = "mymemory" if prev == "google" else "google"
        tr, used = translate_with_engine(text, next_engine)
        user_engine[chat_id] = used
        
        engine_title = "MyMemory" if used == "mymemory" else "Google"
        bot.send_message(
            chat_id,
            f"üìò –í–∞—Ä–∏–∞–Ω—Ç ({engine_title}):\n*{tr}*",
            reply_markup=get_keyboard(),
            parse_mode='Markdown'
        )
    
    elif call.data == "translate_forwarded":
        chat_data = user_data.get(call.message.chat.id, {})
        
        if 'forwarded_text' in chat_data:
            text = chat_data['forwarded_text']
            user_translations[call.message.chat.id] = text
            translated_text = translate_text(text)
            bot.send_message(
                call.message.chat.id,
                f"üìò –ü–µ—Ä–µ–≤–æ–¥:\n*{translated_text}*",
                reply_markup=get_keyboard(),
                parse_mode='Markdown'
            )
        elif 'forwarded_audio' in chat_data:
            process_audio(chat_data['forwarded_audio'])
        
        if call.message.chat.id in user_data:
            del user_data[call.message.chat.id]
    
    elif call.data == "cancel":
        bot.send_message(call.message.chat.id, "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
        if call.message.chat.id in user_data:
            del user_data[call.message.chat.id]

# ===== GRACEFUL SHUTDOWN =====
def signal_handler(sig, frame):
    print('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç–∞...')
    bot.stop_polling()
    sys.exit(0)

signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)

# ===== –ó–ê–ü–£–°–ö =====
print("üöÄ Botargem –∑–∞–ø—É—â–µ–Ω —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–µ–π ‚úÖ")

if __name__ == "__main__":
    while True:
        try:
            print("‚è≥ –ó–∞–ø—É—Å–∫–∞—é infinity_polling...")
            bot.infinity_polling(
                timeout=20,
                long_polling_timeout=20,
                skip_pending=True,
                allowed_updates=['message', 'callback_query']
            )
        except telebot.apihelper.ApiTelegramException as e:
            s = str(e)
            if "409" in s or "getUpdates request" in s:
                print("‚ö†Ô∏è 409: –¥—Ä—É–≥–æ–π –ø—Ä–æ—Ü–µ—Å—Å –µ—â—ë –ø–æ–ª–ª–∏—Ç. –ñ–¥—É 25 —Å–µ–∫ –∏ –ø—Ä–æ–±—É—é —Å–Ω–æ–≤–∞‚Ä¶")
                time.sleep(25)
                continue
            print(f"Telebot error: {e}. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 10 —Å–µ–∫.")
            time.sleep(10)
            continue
        except Exception as e:
            print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 10 —Å–µ–∫.")
            time.sleep(10)